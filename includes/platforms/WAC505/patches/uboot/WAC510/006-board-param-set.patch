diff --git a/common/cmd_dni.c b/common/cmd_dni.c
index ba03db7..e46c808 100644
--- a/common/cmd_dni.c
+++ b/common/cmd_dni.c
@@ -3,175 +3,383 @@
 #include <miiphy.h>
 #include <errno.h>
 
-#define MANUFACTURING_DATA_OFFSET	0x1e0000
-#define CONFIG_SYS_FLASH_SECTOR_SIZE	0x10000
-#define CONFIG_SYS_LOAD_ADD 		0x84000000
-#define SERIAL_NUMBER_LENGTH       	13
-#define BOARD_PRODUCT_ID_LENGTH		6
-#define HW_VER_LENGTH	  		3
-#define SUB_HW_VER_LENGTH		3
-#define REGION_INFO_LENGTH		1
-#define BOARD_TYPE_LENGTH		6
-
-#define SERIAL_NUMBER_OFFSET        0xc
-#define BOARD_PRODUCT_ID_OFFSET     (SERIAL_NUMBER_OFFSET + SERIAL_NUMBER_LENGTH)
-#define HW_VER_OFFSET		    (BOARD_PRODUCT_ID_OFFSET+BOARD_PRODUCT_ID_LENGTH)
-#define SUB_HW_VER_OFFSET	    (HW_VER_OFFSET + HW_VER_LENGTH)
-#define REGION_INFO_OFFSET	    (SUB_HW_VER_OFFSET + SUB_HW_VER_LENGTH)
-#define BOARD_TYPE_OFFSET	    (REGION_INFO_OFFSET + REGION_INFO_LENGTH)
+#define MANUFACTURING_DATA_OFFSET    0x1e0000
+#define CONFIG_SYS_FLASH_SECTOR_SIZE 0x10000
+#define CONFIG_SYS_LOAD_ADD          0x84000000
+
+#define NO_OF_BOARD_PARAMS           14
+#define SERIAL_NUMBER_LENGTH         13
+#define BOARD_PRODUCT_ID_LENGTH      6
+#define HW_VER_LENGTH                3
+#define SUB_HW_VER_LENGTH            3
+#define REGION_INFO_LENGTH           1
+#define BOARD_TYPE_LENGTH            6
+#define DEV_TYPE_LENGTH              8
+#define DEF_SSID_LENGTH              19
+#define DEF_WIFI_PASSWD_LENGTH       12
+#define DEF_IPADDR_LENGTH            13
+#define DEF_ADMIN_USER_LENGTH        5
+#define DEF_ADMIN_PASSWD_LENGTH      8
+
+#define SERIAL_NUMBER_OFFSET    0xc
+#define BOARD_PRODUCT_ID_OFFSET (SERIAL_NUMBER_OFFSET + SERIAL_NUMBER_LENGTH)
+#define HW_VER_OFFSET           (BOARD_PRODUCT_ID_OFFSET+BOARD_PRODUCT_ID_LENGTH)
+#define SUB_HW_VER_OFFSET       (HW_VER_OFFSET + HW_VER_LENGTH)
+#define REGION_INFO_OFFSET      (SUB_HW_VER_OFFSET + SUB_HW_VER_LENGTH)
+#define BOARD_TYPE_OFFSET       (REGION_INFO_OFFSET + REGION_INFO_LENGTH)
+#define DEV_TYPE_OFFSET         (BOARD_TYPE_OFFSET + BOARD_TYPE_LENGTH)
+#define DEF_SSID_OFFSET         (DEV_TYPE_OFFSET + DEV_TYPE_LENGTH)
+#define DEF_WIFI_PASSWD_OFFSET  (DEF_SSID_OFFSET + DEF_SSID_LENGTH)
+#define DEF_IPADDR_OFFSET       (DEF_WIFI_PASSWD_OFFSET + DEF_WIFI_PASSWD_LENGTH)
+#define DEF_ADMIN_USER_OFFSET   (DEF_IPADDR_OFFSET + DEF_IPADDR_LENGTH)
+#define DEF_ADMIN_PASSWD_OFFSET (DEF_ADMIN_USER_OFFSET + DEF_ADMIN_USER_LENGTH)
 
 
 int do_board_parameters_set(cmd_tbl_t *cmdtp, int flag, int argc,
-                             char * const argv[])
- {
-	char runcmd[256];
-	char src[50] ;
-	int offset=0, i=0, j=0, k=0, val=0, sum=0, length, mac_num=2, m=0;
-	int parameters_len[6] ={SERIAL_NUMBER_LENGTH ,BOARD_PRODUCT_ID_LENGTH , HW_VER_LENGTH ,SUB_HW_VER_LENGTH ,REGION_INFO_LENGTH ,BOARD_TYPE_LENGTH};
-	if (argc != 9 ) {
-		printf("%s\n",cmdtp->usage);
-		return 1;
-	}
-	u8 mac[2][6] = {{255, 255, 255, 255, 255, 255},
-                    {255, 255, 255, 255, 255, 255},
-                   };
-
-	char sectorBuff[6 * 2 +
-         SERIAL_NUMBER_LENGTH + BOARD_PRODUCT_ID_LENGTH
-         + HW_VER_LENGTH + SUB_HW_VER_LENGTH + REGION_INFO_LENGTH 
-         + BOARD_TYPE_LENGTH];
-
-	memset(sectorBuff,0,sizeof(sectorBuff));
-
-	for (i=1 ;i<=6 ;i++){
-		length = strlen(argv[i]);   /*check the SN's length*/
-		if (length > parameters_len[i-1]){
-		printf ("the %dth len is wrong,it's lenth is %d\n ", i,parameters_len[i-1]);
-		return 1;
-		}
-		memcpy(sectorBuff + 12 + offset, argv[i], length);
-		offset += length;
-	}
-
-	/* check MAC address */
-	for (k = 7; k < 9; ++k)
-	{
-		sum = 0 , val = 0;
-		i = 0; j = 0;
-		while (argv[k][i])
-		{
-			if (':' == argv[k][i])
-			{
-				mac[m][j++] = val;
-				i++;
-				sum += val;
-				val = 0;
-				continue;
-			}
-			if ((argv[k][i] >= '0') && (argv[k][i] <= '9'))
-				val = val*16 + (argv[k][i] - '0');
-			else if ((argv[k][i] >='a') && (argv[k][i] <= 'f'))
-				val = val*16 + (argv[k][i] - 'a') + 10;
-			else if ((argv[k][i] >= 'A') && (argv[k][i] <= 'F'))
-				val = val*16 + (argv[k][i] - 'A') + 10;
-			else
-			{
-				printf("The %d MAC address is incorrect\n",k);
-				printf("The MAC address can not be all 0x00 or all 0xFF\n");
-				return 1;
-			}
-			i++;
-		}
-		mac[m][j] = val;
-		sum += val;
-		m++;
-		if (j != 5  || 0 == sum || 1530 == sum)
-		{
-			printf("The %d MAC address is incorrect\n",k);
-			printf("The MAC address can not be all 0x00 or all 0xFF\n");
-			return 1;
-		}
-	}
-
-	memcpy(sectorBuff, mac,12);
-
- 	snprintf(runcmd, sizeof(runcmd), "sf probe && sf erase 0x%lx +0x%lx && sf write 0x%lx 0x%lx 0x%lx",(uint)MANUFACTURING_DATA_OFFSET
-,CONFIG_SYS_FLASH_SECTOR_SIZE ,sectorBuff,(uint)MANUFACTURING_DATA_OFFSET, CONFIG_SYS_FLASH_SECTOR_SIZE);
-
-        if (run_command(runcmd, 0) != CMD_RET_SUCCESS)
-		printf("run_command failed !!\n");
-	return 0;
- } 
+        char * const argv[])
+{
+    char runcmd[256];
+    char src[50] ;
+    int offset=0, i=0, j=0, k=0, val=0, sum=0, length, m=0;
+    int parameters_len[12] = {SERIAL_NUMBER_LENGTH ,BOARD_PRODUCT_ID_LENGTH , HW_VER_LENGTH ,SUB_HW_VER_LENGTH ,REGION_INFO_LENGTH ,BOARD_TYPE_LENGTH, DEV_TYPE_LENGTH, DEF_SSID_LENGTH, DEF_WIFI_PASSWD_LENGTH, DEF_IPADDR_LENGTH, DEF_ADMIN_USER_LENGTH, DEF_ADMIN_PASSWD_LENGTH};
+    u8 mac[2][6] = {{255, 255, 255, 255, 255, 255},
+        {255, 255, 255, 255, 255, 255},
+    };
+    char sectorBuff[6 * 2 +
+        SERIAL_NUMBER_LENGTH + BOARD_PRODUCT_ID_LENGTH
+        + HW_VER_LENGTH + SUB_HW_VER_LENGTH + REGION_INFO_LENGTH
+        + BOARD_TYPE_LENGTH + DEV_TYPE_LENGTH + DEF_SSID_LENGTH
+        + DEF_WIFI_PASSWD_LENGTH + DEF_IPADDR_LENGTH + DEF_ADMIN_USER_LENGTH
+        + DEF_ADMIN_PASSWD_LENGTH];
+
+    if (argc != 15 ) {
+        printf("%s\n",cmdtp->usage);
+        return 1;
+    }
+
+    memset(sectorBuff, 0, sizeof(sectorBuff));
+
+    for (i = 1 ; i <= 12 ; i++) {
+        length = strlen(argv[i]);   /*check arg length*/
+        if (length > parameters_len[i-1]) {
+            printf("the %dth len is wrong, it's length is %d\n ", i, parameters_len[i-1]);
+            return 1;
+        }
+        memcpy(sectorBuff + 12 + offset, argv[i], length);
+        offset += length;
+    }
+
+    /* check MAC address */
+    for (k = 13; k < 15; ++k)
+    {
+        sum = 0, val = 0;
+        i = 0; j = 0;
+        while (argv[k][i])
+        {
+            if (':' == argv[k][i])
+            {
+                mac[m][j++] = val;
+                i++;
+                sum += val;
+                val = 0;
+                continue;
+            }
+            if ((argv[k][i] >= '0') && (argv[k][i] <= '9'))
+                val = val*16 + (argv[k][i] - '0');
+            else if ((argv[k][i] >='a') && (argv[k][i] <= 'f'))
+                val = val*16 + (argv[k][i] - 'a') + 10;
+            else if ((argv[k][i] >= 'A') && (argv[k][i] <= 'F'))
+                val = val*16 + (argv[k][i] - 'A') + 10;
+            else
+            {
+                printf("The %d MAC address is incorrect\n",k);
+                printf("The MAC address can not be all 0x00 or all 0xFF\n");
+                return 1;
+            }
+            i++;
+        }
+        mac[m][j] = val;
+        sum += val;
+        m++;
+        if (j != 5  || 0 == sum || 1530 == sum)
+        {
+            printf("The %d MAC address is incorrect\n",k);
+            printf("The MAC address can not be all 0x00 or all 0xFF\n");
+            return 1;
+        }
+    }
+
+    memcpy(sectorBuff, mac, 12);
+
+    snprintf(runcmd, sizeof(runcmd), "sf probe && sf erase 0x%lx +0x%lx && sf write 0x%lx 0x%lx 0x%lx",(uint)MANUFACTURING_DATA_OFFSET
+            ,CONFIG_SYS_FLASH_SECTOR_SIZE ,sectorBuff,(uint)MANUFACTURING_DATA_OFFSET, CONFIG_SYS_FLASH_SECTOR_SIZE);
+
+    if (run_command(runcmd, 0) != CMD_RET_SUCCESS)
+        printf("run_command failed !!\n");
+    return 0;
+}
 
 U_BOOT_CMD(
-          board_parameters_set, 9, 0, do_board_parameters_set,
-	"set <SN> <PRID> <HWID> <SUBHWID> <REGION_INFO> <BOARD_TYPE> <lan address> <wlan address>", 
-	"example : board_parameters_set 4DA159E30007E WAC510 3.1 2.0 1 WAC510 6a:03:7F:EF:77:87 5b:03:33:44:66:FE"
-  );
+        board_parameters_set, 15, 0, do_board_parameters_set,
+        "board_parameters_set <SN> <PRID> <HWID> <SUBHWID> <REGION_INFO> <BOARD_TYPE> <DEV_TYPE> <DEF_SSID> <DEF_WIFI_PASSWD> <DEF_IPADDR> \
+        <DEF_ADMIN_USER> <DEF_ADMIN_PASSWD> <LAN_BASEMAC> <WLAN_BASEMAC>",
+        "example: board_parameters_set 4DA159E30007E WAC510 3.1 2.0 1 WAC510 WAC510NA NetgearFF616F-setup sharedsecret \
+        192.168.0.100 admin password B0:7F:B9:FF:61:6F B0:7F:B9:FF:61:60"
+        );
 
 int do_board_parameters_show(cmd_tbl_t * cmdtp, int flag, int argc,
-                             char * const argv[])
+        char * const argv[])
 {
-	unsigned char sectorBuff[0x10000];
-	int i, end ;
-	char runcmd[255] ;
-
-	snprintf(runcmd, sizeof(runcmd), "sf probe && sf read 0x%lx 0x%lx 0x%lx", sectorBuff,(uint)MANUFACTURING_DATA_OFFSET, CONFIG_SYS_FLASH_SECTOR_SIZE);
-
-        if (run_command(runcmd, 0) != CMD_RET_SUCCESS){
-            printf("run_command failed !!\n");
-	    return 0; 
-	}
-	
-	printf("\nSerial Number: ");
-	end = 12 + SERIAL_NUMBER_LENGTH;
-	for (i = SERIAL_NUMBER_OFFSET ; i < end; ++i)
-		printf("%c",sectorBuff[i]);
-
-	printf("\nproductid: ");
-	end = BOARD_PRODUCT_ID_OFFSET + BOARD_PRODUCT_ID_LENGTH;
-	for (i = BOARD_PRODUCT_ID_OFFSET ; i < end; ++i)
-		printf("%c",sectorBuff[i]);
-
-	printf("\nhwversion : ");
-	end = HW_VER_OFFSET + HW_VER_LENGTH ;
-	for (i = HW_VER_OFFSET; i < end; ++i)
-		printf("%c",sectorBuff[i]);
-	printf("\n");
-
-	printf("\nsubhwversion : ");
-	end = SUB_HW_VER_OFFSET + SUB_HW_VER_LENGTH ;
-	for (i = SUB_HW_VER_OFFSET; i < end; ++i)
-		printf("%c",sectorBuff[i]);
-	printf("\n");
-
-	printf("\nregion-info : ");
-	end = REGION_INFO_OFFSET + REGION_INFO_LENGTH ;
-	for (i = REGION_INFO_OFFSET; i < end; ++i)
-		printf("%c",sectorBuff[i]);
-	printf("\n");
-
-	printf("\nboard_type : ");
-	end = BOARD_TYPE_OFFSET + BOARD_TYPE_LENGTH ;
-	for (i = BOARD_TYPE_OFFSET; i < end; ++i)
-		printf("%c",sectorBuff[i]);
-	printf("\n");
-
-	i = 0;
-	printf("lan mac: %02x:%02x:%02x:%02x:%02x:%02x\n",
-			sectorBuff[i], sectorBuff[i+1], sectorBuff[i+2],
-			sectorBuff[i+3], sectorBuff[i+4], sectorBuff[i+5]);
-
-	i = 6;
-	printf("wan mac: %02x:%02x:%02x:%02x:%02x:%02x\n",
-			sectorBuff[i], sectorBuff[i+1], sectorBuff[i+2],
-			sectorBuff[i+3], sectorBuff[i+4], sectorBuff[i+5]);
-
-	return 0;
+    unsigned char sectorBuff[CONFIG_SYS_FLASH_SECTOR_SIZE];
+    int i, end ;
+    char runcmd[255] ;
+
+    snprintf(runcmd, sizeof(runcmd), "sf probe && sf read 0x%lx 0x%lx 0x%lx", sectorBuff, (uint)MANUFACTURING_DATA_OFFSET, CONFIG_SYS_FLASH_SECTOR_SIZE);
+
+    if (run_command(runcmd, 0) != CMD_RET_SUCCESS){
+        printf("run_command failed !!\n");
+        return 0;
+    }
+
+    printf("\nSerial Number: ");
+    end = 12 + SERIAL_NUMBER_LENGTH;
+    for (i = SERIAL_NUMBER_OFFSET ; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\nproductid: ");
+    end = BOARD_PRODUCT_ID_OFFSET + BOARD_PRODUCT_ID_LENGTH;
+    for (i = BOARD_PRODUCT_ID_OFFSET ; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\nhwversion : ");
+    end = HW_VER_OFFSET + HW_VER_LENGTH ;
+    for (i = HW_VER_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\nsubhwversion : ");
+    end = SUB_HW_VER_OFFSET + SUB_HW_VER_LENGTH ;
+    for (i = SUB_HW_VER_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\nregion-info : ");
+    end = REGION_INFO_OFFSET + REGION_INFO_LENGTH ;
+    for (i = REGION_INFO_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\nboard_type : ");
+    end = BOARD_TYPE_OFFSET + BOARD_TYPE_LENGTH ;
+    for (i = BOARD_TYPE_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\ndevice_type : ");
+    end = DEV_TYPE_OFFSET + DEV_TYPE_LENGTH;
+    for (i = DEV_TYPE_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\ndefault_ssid : ");
+    end = DEF_SSID_OFFSET + DEF_SSID_LENGTH;
+    for (i = DEF_SSID_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\ndefault_wifi_password : ");
+    end = DEF_WIFI_PASSWD_OFFSET + DEF_WIFI_PASSWD_LENGTH;
+    for (i = DEF_WIFI_PASSWD_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\ndefault_ipaddr : ");
+    end = DEF_IPADDR_OFFSET + DEF_IPADDR_LENGTH;
+    for (i = DEF_IPADDR_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\ndefault_admin_user : ");
+    end = DEF_ADMIN_USER_OFFSET + DEF_ADMIN_USER_LENGTH;
+    for (i = DEF_ADMIN_USER_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\ndefault_admin_password : ");
+    end = DEF_ADMIN_PASSWD_OFFSET + DEF_ADMIN_PASSWD_LENGTH;
+    for (i = DEF_ADMIN_PASSWD_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    i = 0;
+    printf("\nlan_mac: %02X:%02X:%02X:%02X:%02X:%02X",
+            sectorBuff[i], sectorBuff[i+1], sectorBuff[i+2],
+            sectorBuff[i+3], sectorBuff[i+4], sectorBuff[i+5]);
+
+    i = 6;
+    printf("\nwlan_mac: %02X:%02X:%02X:%02X:%02X:%02X\n",
+            sectorBuff[i], sectorBuff[i+1], sectorBuff[i+2],
+            sectorBuff[i+3], sectorBuff[i+4], sectorBuff[i+5]);
+
+    return 0;
+}
+
+U_BOOT_CMD(
+        board_parameters_show, 1, 0, do_board_parameters_show,
+        "shows <SN> <PRID> <HWID> <SUBHWID> <REGION_INFO> <BOARD_TYPE> <DEV_TYPE> <DEF_SSID> <DEF_WIFI_PASSWD> <DEF_IPADDR> \
+        <DEF_ADMIN_USER> <DEF_ADMIN_PASSWD> <LAN_BASEMAC> <WLAN_BASEMAC>", ""
+        );
+
+#define BOARDCAL MANUFACTURING_DATA_OFFSET
+int flash_sect_erase (unsigned int begin, unsigned int end)
+{
+    static int probed = 0;
+    char runcmd[256];
+
+    if (probed == 0) {
+        printf ("flash_sect_erase will run command: sf probe && sf erase 0x%lx +0x%lx\n", begin, (end-begin+1));
+        snprintf(runcmd, sizeof(runcmd), "sf probe && sf erase 0x%lx +0x%lx",
+                begin, (end-begin+1));
+        probed = 1;
+    }
+    else {
+        printf ("flash_sect_erase will run command: sf erase 0x%lx +0x%lx\n", begin, (end-begin+1));
+        snprintf(runcmd, sizeof(runcmd), "sf erase 0x%lx +0x%lx",
+                begin, (end-begin+1));
+    }
+    if (run_command(runcmd, 0) != CMD_RET_SUCCESS)
+        printf ("flash_sect_erase error when running command: %s\n", runcmd);
+}
+
+int flash_write (char *src, unsigned int addr, unsigned int cnt)
+{
+    char runcmd[256];
+
+    printf ("flash_write will run command: sf write 0x%lx 0x%lx 0x%lx\n", src, addr, cnt);
+    snprintf(runcmd, sizeof(runcmd), "sf write 0x%lx 0x%lx 0x%lx", src, addr, cnt);
+    if (run_command(runcmd, 0) != CMD_RET_SUCCESS)
+        printf ("flash_write error when running command: %s\n", runcmd);
+}
+
+int flash_read (char *src, unsigned int addr, unsigned int cnt)
+{
+    char runcmd[256];
+    char runcmdprobe[256];
+    snprintf(runcmdprobe, sizeof(runcmd), "sf probe 0 0 0");
+    run_command(runcmdprobe, 0);
+
+    printf ("flash_read will run command: sf read 0x%lx 0x%lx 0x%lx\n", src, addr, cnt);
+    snprintf(runcmd, sizeof(runcmd), "sf read 0x%lx 0x%lx 0x%lx", src, addr, cnt);
+    if (run_command(runcmd, 0) != CMD_RET_SUCCESS){
+        printf ("flash_read error when running command: %s\n", runcmd);
+        return -1;
+    }
+    else
+        return 1;
+}
+
+#define CONFIG_SYS_FLASH_SECTOR_SIZE (0x10000)
+
+void get_board_data(int offset, int len, u8* buf)
+{
+    flash_read(buf, BOARDCAL + offset, len);
+}
+
+/*function set_board_data()
+ *description:
+ *write data to the flash.
+ * return value: 0 (success), 1 (fail)
+ */
+int set_board_data(int offset, int len, u8 *buf)
+{
+    char sectorBuff[CONFIG_SYS_FLASH_SECTOR_SIZE];
+
+    flash_read(sectorBuff, BOARDCAL, CONFIG_SYS_FLASH_SECTOR_SIZE);
+    memcpy(sectorBuff + offset, buf, len);
+    flash_sect_erase (BOARDCAL, BOARDCAL);
+    flash_write (sectorBuff, BOARDCAL, CONFIG_SYS_FLASH_SECTOR_SIZE);
+    return 0;
+}
+
+int do_board_mini_parameters_set(cmd_tbl_t *cmdtp, int flag, int argc,
+        char * const argv[])
+{
+    char runcmd[256];
+    char src[50] ;
+    int offset=0, i=0, j=0, k=0, val=0, sum=0, length, m=0;
+    int parameters_len[1] ={SERIAL_NUMBER_LENGTH};
+
+    if (argc != 4 ) {
+        printf("%s\n",cmdtp->usage);
+        return 1;
+    }
+    u8 mac[2][6] = {{255, 255, 255, 255, 255, 255},
+        {255, 255, 255, 255, 255, 255},
+    };
+
+    char sectorBuff[6 * 2 +
+        SERIAL_NUMBER_LENGTH];
+
+    length = 6 * 2 + SERIAL_NUMBER_LENGTH;
+
+    /* check MAC address */
+    for (k = 2; k < 4; ++k)
+    {
+        sum = 0 , val = 0;
+        i = 0; j = 0;
+        while (argv[k][i])
+        {
+            if (':' == argv[k][i])
+            {
+                mac[m][j++] = val;
+                i++;
+                sum += val;
+                val = 0;
+                continue;
+            }
+            if ((argv[k][i] >= '0') && (argv[k][i] <= '9'))
+                val = val*16 + (argv[k][i] - '0');
+            else if ((argv[k][i] >='a') && (argv[k][i] <= 'f'))
+                val = val*16 + (argv[k][i] - 'a') + 10;
+            else if ((argv[k][i] >= 'A') && (argv[k][i] <= 'F'))
+                val = val*16 + (argv[k][i] - 'A') + 10;
+            else
+            {
+                printf("The %d MAC address is incorrect\n",k);
+                printf("The MAC address can not be all 0x00 or all 0xFF\n");
+                return 1;
+            }
+            i++;
+        }
+        mac[m][j] = val;
+        sum += val;
+        m++;
+        if (j != 5  || 0 == sum || 1530 == sum)
+        {
+            printf("The %d MAC address is incorrect\n",k);
+            printf("The MAC address can not be all 0x00 or all 0xFF\n");
+            return 1;
+        }
+    }
+
+    for (i=1 ;i<=1 ;i++){
+        int len;
+        len = strlen(argv[i]);   /*check the SN's length*/
+        if (len > parameters_len[i-1]){
+            printf ("the %dth len is wrong,it's lenth is %d\n ", i,parameters_len[i-1]);
+            return 1;
+        }
+        offset += len;
+    }
+
+    /* Copy new settings to buffer */
+    get_board_data(0, length, sectorBuff);
+    memcpy(sectorBuff, mac,12);
+
+    offset = 0;
+    for (i=1 ;i<=1 ;i++){
+        int len;
+        len = strlen(argv[i]);
+        memcpy(sectorBuff + 12 + offset, argv[i], len);
+        offset += len;
+    }
+
+    set_board_data(0, length, sectorBuff);
+    return 0;
 }
 
 U_BOOT_CMD(
-	board_parameters_show, 1, 0, do_board_parameters_show,
-	"show <SN> <PRID> <HWID> <SUBHWID> <REGION_INFO> <BOARD_TYPE> <lan address> <wlan address>",
-	"show <SN> <PRID> <HWID> <SUBHWID> <REGION_INFO> <BOARD_TYPE> <lan address> <wlan address>\n"
-);
+        board_mini_parameters_set, 4, 0, do_board_mini_parameters_set,
+        "set <SN> <lan address> <wlan address>",
+        "example: board_mini_parameters_set 4DA159E30007E 6a:03:7F:EF:77:87 5b:03:33:44:66:FE"
+        );
