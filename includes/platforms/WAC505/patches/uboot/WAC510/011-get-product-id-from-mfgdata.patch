diff --git a/arch/arm/cpu/armv7/qca/cmd_bootqca.c b/arch/arm/cpu/armv7/qca/cmd_bootqca.c
index a542405..97d6e48 100644
--- a/arch/arm/cpu/armv7/qca/cmd_bootqca.c
+++ b/arch/arm/cpu/armv7/qca/cmd_bootqca.c
@@ -166,7 +166,7 @@ static int set_fs_bootargs(int *fs_on_nand)
 		setenv("wdtargs", wdt_args);
 	}
 
-	return run_command("setenv bootargs ${bootargs} ${fsbootargs} ${mfgbootargs} ${failsafeargs} ${wdtargs} rootwait", 0);
+	return run_command("setenv bootargs ${product_id} ${bootargs} ${fsbootargs} ${mfgbootargs} ${failsafeargs} ${wdtargs} rootwait", 0);
 }
 
 int config_select(unsigned int addr, const char **config, char *rcmd, int rcmd_size)
diff --git a/board/qcom/ipq40xx_cdp/ipq40xx_cdp.c b/board/qcom/ipq40xx_cdp/ipq40xx_cdp.c
index e358108..deb063f 100644
--- a/board/qcom/ipq40xx_cdp/ipq40xx_cdp.c
+++ b/board/qcom/ipq40xx_cdp/ipq40xx_cdp.c
@@ -55,6 +55,11 @@
 #include <asm/arch-qcom-common/clk.h>
 #include <asm/arch-ipq40xx/smem.h>
 
+#define ETH_MAC_ADDR_OFFSET     0x0
+#define ETH_MAC_ADDR_LENGTH     6
+#define BOARD_PRODUCT_ID_OFFSET 0x19
+#define BOARD_PRODUCT_ID_LENGTH 6
+
 DECLARE_GLOBAL_DATA_PTR;
 
 loff_t board_env_offset;
@@ -90,6 +95,7 @@ qca_mmc mmc_host;
 #endif
 
 extern int spi_nand_init(void);
+static int get_mfg_data(int, size_t, uchar *);
 
 /*
  * Don't have this as a '.bss' variable. The '.bss' and '.rel.dyn'
@@ -326,11 +332,21 @@ int board_late_init(void)
 	gpio_func_data_t *gpio;
 	unsigned int flash_type;
 	qca_smem_flash_info_t *sfi = &qca_smem_flash_info;
+	uchar product_id[BOARD_PRODUCT_ID_LENGTH + 1] = {'\0'};
+	int ret;
 
 	if (sfi->flash_type != SMEM_BOOT_MMC_FLASH) {
 		qca_get_part_details();
 	}
 
+	ret = get_mfg_data(BOARD_PRODUCT_ID_OFFSET, BOARD_PRODUCT_ID_LENGTH, product_id);
+	if (ret < 0) {
+		printf("Reading Product ID failed\n");
+	} else {
+		setenv("product_id", (const char *) product_id);
+		printf("Product ID: %s\n", product_id);
+	}
+
 	/* get machine type from SMEM and set in env */
 	machid = gd->bd->bi_arch_number;
 	printf("machid: %x\n", machid);
@@ -530,13 +546,12 @@ int get_eth_mac_address(uchar *enetaddr, uint no_of_macs)
 	return ret;
 }
 
-/* Getting the default MAC address from MANUFACTURING DATA partition */
-int get_def_eth_mac_address(uchar *enetaddr)
+/* Function to get any MANUFACTURING DATA */
+static int get_mfg_data(int data_off, size_t length, uchar *data_buf)
 {
 	s32 ret = -1;
 	u32 start_blocks;
 	u32 size_blocks;
-	u32 length = 6;
 	u32 flash_type;
 	loff_t md_offset;
 	qca_smem_flash_info_t *sfi = &qca_smem_flash_info;
@@ -563,8 +578,9 @@ int get_def_eth_mac_address(uchar *enetaddr)
 		md_offset =
 		((loff_t) qca_smem_flash_info.flash_block_size * start_blocks);
 
+		md_offset += data_off;
 		ret = nand_read(&nand_info[flash_type],
-				md_offset, &length, enetaddr);
+				md_offset, &length, data_buf);
 		if (ret < 0) {
 			printf("MANUFACTURING DATA partition read failed..\n");
 		}
@@ -573,6 +589,12 @@ int get_def_eth_mac_address(uchar *enetaddr)
 	return ret;
 }
 
+/* Getting the default MAC address from MANUFACTURING DATA partition */
+int get_def_eth_mac_address(uchar *enetaddr)
+{
+	return get_mfg_data(ETH_MAC_ADDR_OFFSET, ETH_MAC_ADDR_LENGTH, enetaddr);
+}
+
 #define ART_PART_SIZE 0x10000
 /* Setting the default MAC address in ART partition */
 int set_def_eth_mac_address(uchar *enetaddr)
