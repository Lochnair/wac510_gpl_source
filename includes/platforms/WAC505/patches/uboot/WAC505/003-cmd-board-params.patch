diff --git a/.compiled b/.compiled
new file mode 100644
index 0000000..e69de29
diff --git a/common/Makefile b/common/Makefile
index 483eb4d..cbbc8f4 100644
--- a/common/Makefile
+++ b/common/Makefile
@@ -41,6 +41,7 @@ COBJS-$(CONFIG_CMD_BOOTM) += cmd_bootm.o
 COBJS-y += cmd_help.o
 COBJS-y += cmd_nvedit.o
 COBJS-y += cmd_version.o
+COBJS-y += cmd_board_params.o
 
 # environment
 COBJS-y += env_common.o
diff --git a/common/cmd_board_params.c b/common/cmd_board_params.c
new file mode 100644
index 0000000..c257b31
--- /dev/null
+++ b/common/cmd_board_params.c
@@ -0,0 +1,426 @@
+/*
+* cmd_board_params.c 
+* Created on December 15, 2016
+*
+* Copyright (c) 2016, NETGEAR, Inc.
+* 350 East Plumeria, San Jose California, 95134, U.S.A.
+* All rights reserved.
+*
+*
+* This software is the confidential and proprietary information of
+* NETGEAR, Inc. ("Confidential Information"). You shall not
+* disclose such Confidential Information and shall use it only in
+* accordance with the terms of the license agreement you entered into
+* with NETGEAR.
+*
+* @author: dinesh.kumar@netgear.com
+* 
+*/
+
+#include <common.h>
+#include <command.h>
+#include <miiphy.h>
+#include <errno.h>
+
+#define MANUDATA_PARTITION_OFFSET	 0x700000
+#define MANUDATA_PARTITION_SIZE	     0x80000
+#define ART_PARTITION_OFFSET	     0x780000
+#define CONFIG_SYS_FLASH_BLOCK_SIZE  0x20000
+
+#define NO_OF_BOARD_PARAMS           14
+#define SERIAL_NUMBER_LENGTH         13
+#define BOARD_PRODUCT_ID_LENGTH      6
+#define HW_VER_LENGTH                3
+#define SUB_HW_VER_LENGTH            3
+#define REGION_INFO_LENGTH           1
+#define BOARD_TYPE_LENGTH            6
+#define DEV_TYPE_LENGTH              8
+#define DEF_SSID_LENGTH              19
+#define DEF_WIFI_PASSWD_LENGTH       12
+#define DEF_IPADDR_LENGTH            13
+#define DEF_ADMIN_USER_LENGTH        5
+#define DEF_ADMIN_PASSWD_LENGTH      8
+
+#define SERIAL_NUMBER_OFFSET    0xc
+#define BOARD_PRODUCT_ID_OFFSET (SERIAL_NUMBER_OFFSET + SERIAL_NUMBER_LENGTH)
+#define HW_VER_OFFSET           (BOARD_PRODUCT_ID_OFFSET+BOARD_PRODUCT_ID_LENGTH)
+#define SUB_HW_VER_OFFSET       (HW_VER_OFFSET + HW_VER_LENGTH)
+#define REGION_INFO_OFFSET      (SUB_HW_VER_OFFSET + SUB_HW_VER_LENGTH)
+#define BOARD_TYPE_OFFSET       (REGION_INFO_OFFSET + REGION_INFO_LENGTH)
+#define DEV_TYPE_OFFSET         (BOARD_TYPE_OFFSET + BOARD_TYPE_LENGTH)
+#define DEF_SSID_OFFSET         (DEV_TYPE_OFFSET + DEV_TYPE_LENGTH)
+#define DEF_WIFI_PASSWD_OFFSET  (DEF_SSID_OFFSET + DEF_SSID_LENGTH)
+#define DEF_IPADDR_OFFSET       (DEF_WIFI_PASSWD_OFFSET + DEF_WIFI_PASSWD_LENGTH)
+#define DEF_ADMIN_USER_OFFSET   (DEF_IPADDR_OFFSET + DEF_IPADDR_LENGTH)
+#define DEF_ADMIN_PASSWD_OFFSET (DEF_ADMIN_USER_OFFSET + DEF_ADMIN_USER_LENGTH)
+#define MAC_LEN 6
+#define BOARD_PARAM_SIZE ((MAC_LEN * 2) + SERIAL_NUMBER_LENGTH + BOARD_PRODUCT_ID_LENGTH + HW_VER_LENGTH + \
+        SUB_HW_VER_LENGTH + REGION_INFO_LENGTH + BOARD_TYPE_LENGTH + DEV_TYPE_LENGTH + DEF_SSID_LENGTH + \
+        DEF_WIFI_PASSWD_LENGTH + DEF_IPADDR_LENGTH + DEF_ADMIN_USER_LENGTH + DEF_ADMIN_PASSWD_LENGTH)
+#define ART_PART_BLOCK_ERASE_SIZE 131072
+
+int do_board_parameters_set(cmd_tbl_t *cmdtp, int flag, int argc,
+        char * const argv[])
+{
+    char runcmd[256];
+    int offset=0, i=0, j=0, k=0, val=0, sum=0, length, m=0;
+    int parameters_len[12] = {SERIAL_NUMBER_LENGTH ,BOARD_PRODUCT_ID_LENGTH , HW_VER_LENGTH ,SUB_HW_VER_LENGTH ,REGION_INFO_LENGTH ,BOARD_TYPE_LENGTH, DEV_TYPE_LENGTH, DEF_SSID_LENGTH, DEF_WIFI_PASSWD_LENGTH, DEF_IPADDR_LENGTH, DEF_ADMIN_USER_LENGTH, DEF_ADMIN_PASSWD_LENGTH};
+    u8 mac[2][6] = {{255, 255, 255, 255, 255, 255},
+        {255, 255, 255, 255, 255, 255},
+    };
+    char sectorBuff[BOARD_PARAM_SIZE];
+    char artSectorBuff[ART_PART_BLOCK_ERASE_SIZE] = {0};
+
+    if (argc != 15 ) {
+        printf("%s\n",cmdtp->usage);
+        return 1;
+    }
+
+    memset(sectorBuff, 0, sizeof(sectorBuff));
+
+    for (i = 1 ; i <= 12 ; i++) {
+        length = strlen(argv[i]);   /*check arg length*/
+        if (length > parameters_len[i-1]) {
+            printf("the %dth len is wrong, it's length is %d\n ", i, parameters_len[i-1]);
+            return 1;
+        }
+        memcpy(sectorBuff + (MAC_LEN * 2) + offset, argv[i], length);
+        offset += length;
+    }
+
+    /* check MAC address */
+    for (k = 13; k < 15; ++k)
+    {
+        sum = 0, val = 0;
+        i = 0; j = 0;
+        while (argv[k][i])
+        {
+            if (':' == argv[k][i])
+            {
+                mac[m][j++] = val;
+                i++;
+                sum += val;
+                val = 0;
+                continue;
+            }
+            if ((argv[k][i] >= '0') && (argv[k][i] <= '9'))
+                val = val*16 + (argv[k][i] - '0');
+            else if ((argv[k][i] >='a') && (argv[k][i] <= 'f'))
+                val = val*16 + (argv[k][i] - 'a') + 10;
+            else if ((argv[k][i] >= 'A') && (argv[k][i] <= 'F'))
+                val = val*16 + (argv[k][i] - 'A') + 10;
+            else
+            {
+                printf("The %d MAC address is incorrect\n",k);
+                printf("The MAC address can not be all 0x00 or all 0xFF\n");
+                return 1;
+            }
+            i++;
+        }
+        mac[m][j] = val;
+        sum += val;
+        m++;
+        if (j != 5  || 0 == sum || 1530 == sum)
+        {
+            printf("The %d MAC address is incorrect\n",k);
+            printf("The MAC address can not be all 0x00 or all 0xFF\n");
+            return 1;
+        }
+    }
+
+    memcpy(sectorBuff, mac, MAC_LEN * 2);
+
+    snprintf(runcmd, sizeof(runcmd), "nand erase 0x%x 0x%x && nand write 0x%x 0x%x 0x%x", (uint)MANUDATA_PARTITION_OFFSET,
+            MANUDATA_PARTITION_SIZE, (uint)sectorBuff, (uint)MANUDATA_PARTITION_OFFSET, CONFIG_SYS_FLASH_BLOCK_SIZE);
+
+    if (run_command(runcmd, 0) != CMD_RET_SUCCESS)
+        printf("run_command failed !!\n");
+
+    memset(runcmd, '\0', sizeof(runcmd));
+    snprintf(runcmd, sizeof(runcmd), "nand read 0x%x 0x%x 0x%x", (uint)(artSectorBuff), ART_PARTITION_OFFSET,
+            CONFIG_SYS_FLASH_BLOCK_SIZE);
+
+    if (run_command(runcmd, 0) != CMD_RET_SUCCESS)
+        printf("run_command failed !!\n");
+
+    memcpy(artSectorBuff, sectorBuff, MAC_LEN);
+    sectorBuff[MAC_LEN - 1] += 0x10;
+    memcpy(artSectorBuff+MAC_LEN, sectorBuff, MAC_LEN);
+    memset(runcmd, '\0', sizeof(runcmd));
+    snprintf(runcmd, sizeof(runcmd), "nand erase 0x%x 0x%x && nand write 0x%x 0x%x 0x%x", (uint)ART_PARTITION_OFFSET,
+            CONFIG_SYS_FLASH_BLOCK_SIZE, (uint)artSectorBuff, (uint)ART_PARTITION_OFFSET, CONFIG_SYS_FLASH_BLOCK_SIZE);
+
+    if (run_command(runcmd, 0) != CMD_RET_SUCCESS)
+        printf("run_command failed !!\n");
+
+    return 0;
+}
+
+U_BOOT_CMD(
+        board_parameters_set, 15, 0, do_board_parameters_set,
+        "board_parameters_set <SN> <PRID> <HWID> <SUBHWID> <REGION_INFO> <BOARD_TYPE> <DEV_TYPE> <DEF_SSID> <DEF_WIFI_PASSWD> <DEF_IPADDR> \
+        <DEF_ADMIN_USER> <DEF_ADMIN_PASSWD> <LAN_BASEMAC> <WLAN_BASEMAC>",
+        "example: board_parameters_set 4DA159E30007E WAC510 3.1 2.0 1 WAC510 WAC510NA NetgearFF616F-setup sharedsecret \
+        192.168.0.100 admin password B0:7F:B9:FF:61:6F B0:7F:B9:FF:61:60"
+        );
+
+int do_board_parameters_show(cmd_tbl_t * cmdtp, int flag, int argc,
+        char * const argv[])
+{
+    unsigned char sectorBuff[CONFIG_SYS_FLASH_BLOCK_SIZE];
+    int i, end ;
+    char runcmd[255] ;
+
+	snprintf(runcmd, sizeof(runcmd), "nand read 0x%x 0x%x 0x%x", (uint)sectorBuff, (uint)MANUDATA_PARTITION_OFFSET, sizeof(sectorBuff));
+
+    if (run_command(runcmd, 0) != CMD_RET_SUCCESS){
+        printf("run_command failed !!\n");
+        return 0;
+    }
+
+    printf("\nSerial Number: ");
+    end = 12 + SERIAL_NUMBER_LENGTH;
+    for (i = SERIAL_NUMBER_OFFSET ; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\nproductid: ");
+    end = BOARD_PRODUCT_ID_OFFSET + BOARD_PRODUCT_ID_LENGTH;
+    for (i = BOARD_PRODUCT_ID_OFFSET ; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\nhwversion : ");
+    end = HW_VER_OFFSET + HW_VER_LENGTH ;
+    for (i = HW_VER_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\nsubhwversion : ");
+    end = SUB_HW_VER_OFFSET + SUB_HW_VER_LENGTH ;
+    for (i = SUB_HW_VER_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\nregion-info : ");
+    end = REGION_INFO_OFFSET + REGION_INFO_LENGTH ;
+    for (i = REGION_INFO_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\nboard_type : ");
+    end = BOARD_TYPE_OFFSET + BOARD_TYPE_LENGTH ;
+    for (i = BOARD_TYPE_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\ndevice_type : ");
+    end = DEV_TYPE_OFFSET + DEV_TYPE_LENGTH;
+    for (i = DEV_TYPE_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\ndefault_ssid : ");
+    end = DEF_SSID_OFFSET + DEF_SSID_LENGTH;
+    for (i = DEF_SSID_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\ndefault_wifi_password : ");
+    end = DEF_WIFI_PASSWD_OFFSET + DEF_WIFI_PASSWD_LENGTH;
+    for (i = DEF_WIFI_PASSWD_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\ndefault_ipaddr : ");
+    end = DEF_IPADDR_OFFSET + DEF_IPADDR_LENGTH;
+    for (i = DEF_IPADDR_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\ndefault_admin_user : ");
+    end = DEF_ADMIN_USER_OFFSET + DEF_ADMIN_USER_LENGTH;
+    for (i = DEF_ADMIN_USER_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    printf("\ndefault_admin_password : ");
+    end = DEF_ADMIN_PASSWD_OFFSET + DEF_ADMIN_PASSWD_LENGTH;
+    for (i = DEF_ADMIN_PASSWD_OFFSET; i < end; ++i)
+        printf("%c",sectorBuff[i]);
+
+    i = 0;
+    printf("\nlan_mac: %02X:%02X:%02X:%02X:%02X:%02X",
+            sectorBuff[i], sectorBuff[i+1], sectorBuff[i+2],
+            sectorBuff[i+3], sectorBuff[i+4], sectorBuff[i+5]);
+
+    i = 6;
+    printf("\nwlan_mac: %02X:%02X:%02X:%02X:%02X:%02X\n",
+            sectorBuff[i], sectorBuff[i+1], sectorBuff[i+2],
+            sectorBuff[i+3], sectorBuff[i+4], sectorBuff[i+5]);
+
+    return 0;
+}
+
+U_BOOT_CMD(
+        board_parameters_show, 1, 0, do_board_parameters_show,
+        "shows <SN> <PRID> <HWID> <SUBHWID> <REGION_INFO> <BOARD_TYPE> <DEV_TYPE> <DEF_SSID> <DEF_WIFI_PASSWD> <DEF_IPADDR> \
+        <DEF_ADMIN_USER> <DEF_ADMIN_PASSWD> <LAN_BASEMAC> <WLAN_BASEMAC>", ""
+        );
+
+int flash_sect_erase (unsigned int offset, unsigned int size)
+{
+    char runcmd[256];
+
+    snprintf(runcmd, sizeof(runcmd), "nand erase 0x%x 0x%x",
+                offset, size);
+
+    if (run_command(runcmd, 0) != CMD_RET_SUCCESS) {
+        printf ("flash_sect_erase error when running command: %s\n", runcmd);
+		return -1;
+	}
+	return 0;
+}
+
+int flash_write (char *src, unsigned int addr, unsigned int cnt)
+{
+    char runcmd[256];
+
+    snprintf(runcmd, sizeof(runcmd), "nand write 0x%x 0x%x 0x%x", (uint) src, addr, cnt);
+    if (run_command(runcmd, 0) != CMD_RET_SUCCESS) {
+        printf ("flash_write error when running command: %s\n", runcmd);
+		return -1;
+	}
+	return 0;
+}
+
+int flash_read (char *src, unsigned int addr, unsigned int cnt)
+{
+    char runcmd[256];
+
+    snprintf(runcmd, sizeof(runcmd), "nand read 0x%x 0x%x 0x%x", (uint) src, addr, cnt);
+    if (run_command(runcmd, 0) != CMD_RET_SUCCESS) {
+        printf ("flash_read error when running command: %s\n", runcmd);
+		return -1;
+    }
+	return 0;
+}
+
+int get_board_data(int offset, int len, char* buf)
+{
+    return flash_read(buf, MANUDATA_PARTITION_OFFSET + offset, len);
+}
+
+/*function set_board_data()
+ *description:
+ *write data to the flash.
+ * return value: 0 (success), 1 (fail)
+ */
+int set_board_data(int offset, int len, char *buf)
+{
+    char sectorBuff[CONFIG_SYS_FLASH_BLOCK_SIZE];
+	int ret;
+
+    if ((ret = flash_read(sectorBuff, MANUDATA_PARTITION_OFFSET, CONFIG_SYS_FLASH_BLOCK_SIZE)) == 0) {
+		memcpy(sectorBuff + offset, buf, len);
+		if ((ret = flash_sect_erase(MANUDATA_PARTITION_OFFSET, MANUDATA_PARTITION_SIZE)) == 0) {
+		    ret = flash_write(sectorBuff, MANUDATA_PARTITION_OFFSET, CONFIG_SYS_FLASH_BLOCK_SIZE);
+		}
+	}
+
+    return ret;
+}
+
+int do_board_mini_parameters_set(cmd_tbl_t *cmdtp, int flag, int argc,
+        char * const argv[])
+{
+    int offset=0, i=0, j=0, k=0, val=0, sum=0, length, m=0;
+    int parameters_len[2] ={SERIAL_NUMBER_LENGTH, DEF_SSID_LENGTH};
+
+    if (argc != 5 ) {
+        printf("%s\n",cmdtp->usage);
+        return 1;
+    }
+    u8 mac[2][6] = {{255, 255, 255, 255, 255, 255},
+        {255, 255, 255, 255, 255, 255},
+    };
+
+    char sectorBuff[6 * 2 +
+               SERIAL_NUMBER_LENGTH + BOARD_PRODUCT_ID_LENGTH
+               + HW_VER_LENGTH + SUB_HW_VER_LENGTH + REGION_INFO_LENGTH
+               + BOARD_TYPE_LENGTH
+               + DEV_TYPE_LENGTH
+               + DEF_SSID_LENGTH];
+
+    length = 6 * 2 + SERIAL_NUMBER_LENGTH + BOARD_PRODUCT_ID_LENGTH
+                       + HW_VER_LENGTH + SUB_HW_VER_LENGTH + REGION_INFO_LENGTH
+                       + BOARD_TYPE_LENGTH
+                       + DEV_TYPE_LENGTH
+                       + DEF_SSID_LENGTH;
+
+
+    /* check MAC address */
+    for (k = 3; k < 5; ++k)
+    {
+        sum = 0 , val = 0;
+        i = 0; j = 0;
+        while (argv[k][i])
+        {
+            if (':' == argv[k][i])
+            {
+                mac[m][j++] = val;
+                i++;
+                sum += val;
+                val = 0;
+                continue;
+            }
+            if ((argv[k][i] >= '0') && (argv[k][i] <= '9'))
+                val = val*16 + (argv[k][i] - '0');
+            else if ((argv[k][i] >='a') && (argv[k][i] <= 'f'))
+                val = val*16 + (argv[k][i] - 'a') + 10;
+            else if ((argv[k][i] >= 'A') && (argv[k][i] <= 'F'))
+                val = val*16 + (argv[k][i] - 'A') + 10;
+            else
+            {
+                printf("The %d MAC address is incorrect\n",k);
+                printf("The MAC address can not be all 0x00 or all 0xFF\n");
+                return 1;
+            }
+            i++;
+        }
+        mac[m][j] = val;
+        sum += val;
+        m++;
+        if (j != 5  || 0 == sum || 1530 == sum)
+        {
+            printf("The %d MAC address is incorrect\n",k);
+            printf("The MAC address can not be all 0x00 or all 0xFF\n");
+            return 1;
+        }
+    }
+
+    for (i=1 ;i<=2 ;i++){
+        int len;
+        len = strlen(argv[i]);   /*check the SN's length*/
+        if (len > parameters_len[i-1]){
+            printf ("the %dth len is wrong,it's lenth is %d\n ", i,parameters_len[i-1]);
+            return 1;
+        }
+        offset += len;
+    }
+
+    /* Copy new settings to buffer */
+    if (get_board_data(0, length, sectorBuff) < 0) {
+		return -1;
+	}
+    memcpy(sectorBuff, mac,12);
+
+    offset = 0;
+    for (i=1 ;i<=1 ;i++){
+        int len;
+        len = strlen(argv[i]);
+        memcpy(sectorBuff + 12 + offset, argv[i], len);
+        offset += len;
+    }
+    memcpy(sectorBuff + 12 + SERIAL_NUMBER_LENGTH + BOARD_PRODUCT_ID_LENGTH
+         + HW_VER_LENGTH + SUB_HW_VER_LENGTH + REGION_INFO_LENGTH
+         + BOARD_TYPE_LENGTH
+         + DEV_TYPE_LENGTH, argv[2], DEF_SSID_LENGTH);
+
+    return set_board_data(0, length, sectorBuff);
+}
+
+U_BOOT_CMD(
+          board_mini_parameters_set, 5, 0, do_board_mini_parameters_set,
+   "set <SN> <DEFAULT_SSID> <lan address> <wlan address>",
+   "example: board_mini_parameters_set 4DA159E30007E Netgear087b2f-setup 6a:03:7F:EF:77:86 5b:03:33:44:66:FE"
+);
