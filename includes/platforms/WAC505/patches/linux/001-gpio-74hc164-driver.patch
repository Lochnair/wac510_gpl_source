diff --git a/arch/arm/boot/dts/qcom-ipq40xx-ap.dk01.1-c2.dts b/arch/arm/boot/dts/qcom-ipq40xx-ap.dk01.1-c2.dts
index 0cd06a8..740b6b3 100644
--- a/arch/arm/boot/dts/qcom-ipq40xx-ap.dk01.1-c2.dts
+++ b/arch/arm/boot/dts/qcom-ipq40xx-ap.dk01.1-c2.dts
@@ -40,5 +40,10 @@
 			};
 
 		};
+		shift_register_74hc164 {
+			compatible = "74hc164";
+			gpios = <&tlmm 4 GPIO_ACTIVE_HIGH  /* DATA */
+			 	&tlmm 5 GPIO_ACTIVE_HIGH  /* CLK */>; 
+		};
 	};
 };
diff --git a/drivers/gpio/Kconfig b/drivers/gpio/Kconfig
index 2c38d95..ad81bb1 100644
--- a/drivers/gpio/Kconfig
+++ b/drivers/gpio/Kconfig
@@ -834,4 +834,12 @@ config GPIO_VIPERBOARD
           River Tech's viperboard.h for detailed meaning
           of the module parameters.
 
+comment "Other GPIO expanders"
+
+config GPIO_74HC164
+       tristate "NXP 74HC164 Output expanders"
+       help
+         Platform driver for 74HC164 8-output Expanders. This
+         provides a GPIO interface supporting outputs.
+
 endif
diff --git a/drivers/gpio/Makefile b/drivers/gpio/Makefile
index 5d50179..623bd85 100644
--- a/drivers/gpio/Makefile
+++ b/drivers/gpio/Makefile
@@ -11,6 +11,7 @@ obj-$(CONFIG_GPIO_ACPI)		+= gpiolib-acpi.o
 obj-$(CONFIG_GPIO_GENERIC)	+= gpio-generic.o
 
 obj-$(CONFIG_GPIO_74X164)	+= gpio-74x164.o
+obj-$(CONFIG_GPIO_74HC164)	+= gpio-74hc164.o
 obj-$(CONFIG_GPIO_ADNP)		+= gpio-adnp.o
 obj-$(CONFIG_GPIO_ADP5520)	+= gpio-adp5520.o
 obj-$(CONFIG_GPIO_ADP5588)	+= gpio-adp5588.o
diff --git a/drivers/gpio/gpio-74hc164.c b/drivers/gpio/gpio-74hc164.c
new file mode 100644
index 0000000..e0c57cc
--- /dev/null
+++ b/drivers/gpio/gpio-74hc164.c
@@ -0,0 +1,269 @@
+/*
+ *  NXP 74HC164 - output expander  GPIO driver
+ *
+ *  Copyright (C) 2010 Gabor Juhos <juhosg@openwrt.org>
+ *  Copyright (C) 2010 Miguel Gaio <miguel.gaio@efixo.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License version 2 as
+ *  published by the Free Software Foundation.
+ *
+ *  Copy from nxp_74hc153.c code
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/slab.h>
+#include <linux/gpio.h>
+#include <linux/bitops.h>
+#include <linux/platform_device.h>
+#include <linux/74hc164.h>
+#include <linux/of.h>
+#include <linux/of_gpio.h>
+#include <linux/spinlock.h>
+
+#define NXP_74HC164_NUM_GPIOS   8
+
+struct nxp_74hc164_chip {
+        struct device           *parent;
+        struct gpio_chip        gpio_chip;
+        spinlock_t              lock;
+        long                    mask;
+};
+
+static void nxp_74hc164_set_value(struct gpio_chip *, unsigned, int);
+
+static struct nxp_74hc164_chip *gpio_to_nxp(struct gpio_chip *gc)
+{
+        return container_of(gc, struct nxp_74hc164_chip, gpio_chip);
+}
+
+static int nxp_74hc164_direction_input(struct gpio_chip *gc, unsigned offset)
+{
+        WARN_ON(1);
+        return -EINVAL;
+}
+
+static int nxp_74hc164_direction_output(struct gpio_chip *gc,
+                                        unsigned offset, int val)
+{
+        nxp_74hc164_set_value(gc, offset, val);
+        return 0;
+}
+
+static int nxp_74hc164_get_value(struct gpio_chip *gc, unsigned offset)
+{
+        struct nxp_74hc164_chip *nxp = gpio_to_nxp(gc);
+        int ret;
+        unsigned long flags;
+
+        spin_lock_irqsave(&nxp->lock, flags);
+        ret = test_bit(offset, &nxp->mask);
+        spin_unlock_irqrestore(&nxp->lock, flags);
+
+        return ret;
+}
+
+static void nxp_74hc164_set_value(struct gpio_chip *gc,
+                                  unsigned offset, int val)
+{
+        struct nxp_74hc164_chip *nxp;
+        struct nxp_74hc164_platform_data *pdata;
+        long mask;
+        int refresh;
+        int i;
+        unsigned long flags;
+
+        nxp = gpio_to_nxp(gc);
+        pdata = nxp->parent->platform_data;
+
+        spin_lock_irqsave(&nxp->lock, flags);
+        if (val)
+                refresh = (test_and_set_bit(offset, &nxp->mask) != val);
+        else
+                refresh = (test_and_clear_bit(offset, &nxp->mask) != val);
+
+        if (refresh) {
+                mask = nxp->mask;
+                for (i = 8; i > 0; --i, mask <<= 1) {
+                        gpio_set_value(pdata->gpio_pin_data, mask & 0x80);
+                        gpio_set_value(pdata->gpio_pin_clk, 1);
+                        gpio_set_value(pdata->gpio_pin_clk, 0);
+                }
+        }
+        spin_unlock_irqrestore(&nxp->lock, flags);
+}
+
+static int of_74hc164_get_pins(struct device_node *np, struct nxp_74hc164_platform_data *pdata)
+{
+    if (of_gpio_count(np) < 2)
+        return -ENODEV;
+
+    pdata->gpio_pin_data = of_get_gpio(np, 0);
+    pdata->gpio_pin_clk = of_get_gpio(np, 1);
+    if (!gpio_is_valid(pdata->gpio_pin_data) || !gpio_is_valid(pdata->gpio_pin_clk)) {
+        pr_err("%s: invalid GPIO pins, data=%d/clk=%d\n",
+               np->full_name, pdata->gpio_pin_data, pdata->gpio_pin_clk);
+        return -ENODEV;
+    }
+
+    return 0;
+}
+
+static int nxp_74hc164_probe(struct platform_device *pdev)
+{
+        struct nxp_74hc164_platform_data *of_data, *pdata;
+        struct nxp_74hc164_chip *nxp;
+        struct gpio_chip *gc;
+        int err;
+
+        if (pdev->dev.of_node) {
+            of_data = kzalloc(sizeof(struct nxp_74hc164_platform_data), GFP_KERNEL);
+            err = of_74hc164_get_pins(pdev->dev.of_node, of_data);
+            if (err)
+                return err;
+            of_data->gpio_base = -1;
+            pdata = of_data;
+            pdev->dev.platform_data = of_data;
+        } else {
+            pdata = pdev->dev.platform_data;
+        }
+
+        if (pdata == NULL) {
+                dev_dbg(&pdev->dev, "no platform data specified\n");
+                return -EINVAL;
+        }
+
+        nxp = kzalloc(sizeof(struct nxp_74hc164_chip), GFP_KERNEL);
+        if (nxp == NULL) {
+                dev_err(&pdev->dev, "no memory for private data\n");
+                return -ENOMEM;
+        }
+
+        err = gpio_request(pdata->gpio_pin_clk, dev_name(&pdev->dev));
+        if (err) {
+                dev_err(&pdev->dev, "unable to claim gpio %u, err=%d\n",
+                        pdata->gpio_pin_clk, err);
+                goto err_free_nxp;
+        }
+
+        err = gpio_request(pdata->gpio_pin_data, dev_name(&pdev->dev));
+        if (err) {
+                dev_err(&pdev->dev, "unable to claim gpio %u, err=%d\n",
+                        pdata->gpio_pin_data, err);
+                goto err_free_clk;
+        }
+
+        err = gpio_direction_output(pdata->gpio_pin_clk, 0);
+        if (err) {
+                dev_err(&pdev->dev,
+                        "unable to set direction of gpio %u, err=%d\n",
+                        pdata->gpio_pin_clk, err);
+                goto err_free_data;
+        }
+
+        err = gpio_direction_output(pdata->gpio_pin_data, 0);
+        if (err) {
+                dev_err(&pdev->dev,
+                        "unable to set direction of gpio %u, err=%d\n",
+                        pdata->gpio_pin_data, err);
+                goto err_free_data;
+        }
+
+        nxp->parent = &pdev->dev;
+        spin_lock_init(&nxp->lock);
+
+        gc = &nxp->gpio_chip;
+
+        gc->direction_input  = nxp_74hc164_direction_input;
+        gc->direction_output = nxp_74hc164_direction_output;
+        gc->get = nxp_74hc164_get_value;
+        gc->set = nxp_74hc164_set_value;
+        gc->can_sleep = 0;
+
+        gc->base = pdata->gpio_base;
+        gc->ngpio = NXP_74HC164_NUM_GPIOS;
+        gc->label = dev_name(nxp->parent);
+        gc->dev = nxp->parent;
+        gc->owner = THIS_MODULE;
+
+        err = gpiochip_add(&nxp->gpio_chip);
+        if (err) {
+                dev_err(&pdev->dev, "unable to add gpio chip, err=%d\n", err);
+                goto err_free_data;
+        }
+
+        platform_set_drvdata(pdev, nxp);
+        return 0;
+
+ err_free_data:
+        gpio_free(pdata->gpio_pin_data);
+ err_free_clk:
+        gpio_free(pdata->gpio_pin_clk);
+ err_free_nxp:
+        kfree(nxp);
+        return err;
+}
+
+static int nxp_74hc164_remove(struct platform_device *pdev)
+{
+        struct nxp_74hc164_chip *nxp = platform_get_drvdata(pdev);
+        struct nxp_74hc164_platform_data *pdata = pdev->dev.platform_data;
+
+        if (nxp) {
+                int err;
+
+                err = gpiochip_remove(&nxp->gpio_chip);
+                if (err) {
+                        dev_err(&pdev->dev,
+                                "unable to remove gpio chip, err=%d\n",
+                                err);
+                        return err;
+                }
+
+                gpio_free(pdata->gpio_pin_clk);
+                gpio_free(pdata->gpio_pin_data);
+
+                kfree(nxp);
+                platform_set_drvdata(pdev, NULL);
+        }
+
+        return 0;
+}
+
+#if defined(CONFIG_OF)
+static const struct of_device_id nxp_74hc164_dt_ids[] = {
+    { .compatible = "74hc164", },
+};
+
+MODULE_DEVICE_TABLE(of, nxp_74hc164_dt_ids);
+#endif
+static struct platform_driver nxp_74hc164_driver = {
+        .probe          = nxp_74hc164_probe,
+        .remove         = nxp_74hc164_remove,
+        .driver = {
+                .name   = NXP_74HC164_DRIVER_NAME,
+                .owner  = THIS_MODULE,
+                .of_match_table = of_match_ptr(nxp_74hc164_dt_ids),
+        },
+};
+
+static int __init nxp_74hc164_init(void)
+{
+        return platform_driver_register(&nxp_74hc164_driver);
+}
+subsys_initcall(nxp_74hc164_init);
+
+static void __exit nxp_74hc164_exit(void)
+{
+        platform_driver_unregister(&nxp_74hc164_driver);
+}
+module_exit(nxp_74hc164_exit);
+
+MODULE_AUTHOR("Gabor Juhos <juhosg@openwrt.org>");
+MODULE_AUTHOR("Miguel Gaio <miguel.gaio@efixo.com>");
+MODULE_DESCRIPTION("GPIO expander driver for NXP 74HC164");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:" NXP_74HC164_DRIVER_NAME);
diff --git a/include/linux/74hc164.h b/include/linux/74hc164.h
new file mode 100644
index 0000000..7f01c98
--- /dev/null
+++ b/include/linux/74hc164.h
@@ -0,0 +1,23 @@
+/*
+ *  NXP 74HC164 - Dual 4-input multiplexer defines
+ *
+ *  Copyright (C) 2010 Gabor Juhos <juhosg@openwrt.org>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License version 2 as
+ *  published by the Free Software Foundation.
+ */
+
+#ifndef _NXP_74HC164_H
+#define _NXP_74HC164_H
+
+#define NXP_74HC164_DRIVER_NAME "nxp-74hc164"
+
+struct nxp_74hc164_platform_data {
+        unsigned        gpio_base;
+        unsigned        gpio_pin_data;
+        unsigned        gpio_pin_clk;
+};
+
+#endif /* _NXP_74HC164_H */
+
