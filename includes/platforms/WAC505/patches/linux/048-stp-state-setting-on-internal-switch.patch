diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index a63b61a..e804b8c 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -1185,6 +1185,7 @@ struct net_device_ops {
 							struct net_device *dev,
 							void *priv);
 	int			(*ndo_get_lock_subclass)(struct net_device *dev);
+	void			(*ndo_set_switch_stp_state_cb)(struct net_device *dev, void (*func)(u32, u16));
 };
 
 /*
diff --git a/net/bridge/br_device.c b/net/bridge/br_device.c
index 7bfd5c9..f8da28f 100644
--- a/net/bridge/br_device.c
+++ b/net/bridge/br_device.c
@@ -363,6 +363,7 @@ static const struct net_device_ops br_netdev_ops = {
 	.ndo_bridge_getlink	 = br_getlink,
 	.ndo_bridge_setlink	 = br_setlink,
 	.ndo_bridge_dellink	 = br_dellink,
+	.ndo_set_switch_stp_state_cb	= br_set_switch_stp_state,
 };
 
 static void br_dev_free(struct net_device *dev)
diff --git a/net/bridge/br_if.c b/net/bridge/br_if.c
index b8b3539..cc5eb40 100644
--- a/net/bridge/br_if.c
+++ b/net/bridge/br_if.c
@@ -89,8 +89,10 @@ void br_port_carrier_check(struct net_bridge_port *p)
 		if (p->state == BR_STATE_DISABLED)
 			br_stp_enable_port(p);
 	} else {
-		if (p->state != BR_STATE_DISABLED)
+		if (p->state != BR_STATE_DISABLED) {
 			br_stp_disable_port(p);
+			set_port_state_on_switch(p);
+		}
 	}
 	spin_unlock_bh(&br->lock);
 }
@@ -146,6 +148,11 @@ static void del_nbp(struct net_bridge_port *p)
 	dev_set_promiscuity(dev, -1);
 
 	spin_lock_bh(&br->lock);
+	if (p->state != BR_STATE_FORWARDING) {
+		p->state = BR_STATE_FORWARDING;
+		set_port_state_on_switch(p);
+	}
+
 	br_stp_disable_port(p);
 	spin_unlock_bh(&br->lock);
 
diff --git a/net/bridge/br_netlink.c b/net/bridge/br_netlink.c
index 1bbc23c..9808a46 100644
--- a/net/bridge/br_netlink.c
+++ b/net/bridge/br_netlink.c
@@ -362,6 +362,18 @@ static int br_setport(struct net_bridge_port *p, struct nlattr *tb[])
 	return 0;
 }
 
+void br_set_switch_stp_state(struct net_device *dev, void (*func)(u32, u16))
+{
+	struct net_bridge *br = netdev_priv(dev);
+
+	if (br && func) {
+		spin_lock_bh(&br->lock);
+		if (!br->fal_stp_set_port_state)
+			br->fal_stp_set_port_state = func;
+		spin_unlock_bh(&br->lock);
+	}
+}
+
 /* Change state and parameters on port. */
 int br_setlink(struct net_device *dev, struct nlmsghdr *nlh)
 {
diff --git a/net/bridge/br_notify.c b/net/bridge/br_notify.c
index 2998dd1..f52cab3 100644
--- a/net/bridge/br_notify.c
+++ b/net/bridge/br_notify.c
@@ -76,8 +76,10 @@ static int br_device_event(struct notifier_block *unused, unsigned long event, v
 
 	case NETDEV_DOWN:
 		spin_lock_bh(&br->lock);
-		if (br->dev->flags & IFF_UP)
-			br_stp_disable_port(p);
+		if (br->dev->flags & IFF_UP) {
+		        br_stp_disable_port(p);
+		        set_port_state_on_switch(p);
+		}
 		spin_unlock_bh(&br->lock);
 		break;
 
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index ea40a7b..fa0357e 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -183,10 +183,12 @@ struct net_bridge_port
 	struct timer_list		forward_delay_timer;
 	struct timer_list		hold_timer;
 	struct timer_list		message_age_timer;
+	struct timer_list		bpdu_timer;
 	struct kobject			kobj;
 	struct rcu_head			rcu;
 
 	unsigned long 			flags;
+	u8 			loop_detected;
 
 #ifdef CONFIG_BRIDGE_IGMP_SNOOPING
 	struct bridge_mcast_query	ip4_query;
@@ -311,6 +313,7 @@ struct net_bridge
 	u8				vlan_enabled;
 	struct net_port_vlans __rcu	*vlan_info;
 #endif
+	void (*fal_stp_set_port_state)(u32 port_id, u16 state);
 };
 
 struct br_input_skb_cb {
@@ -819,6 +822,8 @@ void br_ifinfo_notify(int event, struct net_bridge_port *port);
 extern int bridge_nlevent_init(void);
 #endif
 
+void set_port_state_on_switch(struct net_bridge_port *p);
+void br_set_switch_stp_state(struct net_device *dev, void (*func)(u32, u16));
 int br_setlink(struct net_device *dev, struct nlmsghdr *nlmsg);
 int br_dellink(struct net_device *dev, struct nlmsghdr *nlmsg);
 int br_getlink(struct sk_buff *skb, u32 pid, u32 seq, struct net_device *dev,
diff --git a/net/bridge/br_private_stp.h b/net/bridge/br_private_stp.h
index 2fe910c..035c8df 100644
--- a/net/bridge/br_private_stp.h
+++ b/net/bridge/br_private_stp.h
@@ -29,6 +29,8 @@
 #define BR_MIN_PATH_COST	1
 #define BR_MAX_PATH_COST	65535
 
+#define IS_WIRED_LAN(dev) (dev->priv_flags & IFF_WIRED_LAN)
+
 struct br_config_bpdu {
 	unsigned int	topology_change:1;
 	unsigned int	topology_change_ack:1;
@@ -61,6 +63,7 @@ void br_received_tcn_bpdu(struct net_bridge_port *p);
 void br_transmit_config(struct net_bridge_port *p);
 void br_transmit_tcn(struct net_bridge *br);
 void br_topology_change_detection(struct net_bridge *br);
+void br_make_blocking(struct net_bridge_port *p);
 
 /* br_stp_bpdu.c */
 void br_send_config_bpdu(struct net_bridge_port *, struct br_config_bpdu *);
diff --git a/net/bridge/br_stp.c b/net/bridge/br_stp.c
index 3c86f05..9fd8f98 100644
--- a/net/bridge/br_stp.c
+++ b/net/bridge/br_stp.c
@@ -21,6 +21,19 @@
  */
 #define MESSAGE_AGE_INCR	((HZ / 256) + 1)
 
+extern char g_product_id[7];
+
+#define MIN_PORT_NUM_VAL 1
+#define MAX_PORT_NUM_VAL 5
+#define PORT_START_NUM 5
+
+/* switch stp state value */
+#define SWITCH_STP_STATE_DISABLING 0
+#define SWITCH_STP_STATE_BLOCKING 1
+#define SWITCH_STP_STATE_LISTENING 2
+#define SWITCH_STP_STATE_LEARNING 3
+#define SWITCH_STP_STATE_FORWARDING 4
+
 static const char *const br_port_state_names[] = {
 	[BR_STATE_DISABLED] = "disabled",
 	[BR_STATE_LISTENING] = "listening",
@@ -29,6 +42,43 @@ static const char *const br_port_state_names[] = {
 	[BR_STATE_BLOCKING] = "blocking",
 };
 
+void set_port_state_on_switch(struct net_bridge_port *p)
+{
+	struct net_bridge *br = p->br;
+	uint16_t port_id = 0, interface_no = 0;
+
+
+	if ((br->stp_enabled != BR_KERNEL_STP) || (!IS_WIRED_LAN(p->dev))) {
+		return;
+	}
+
+	interface_no = p->dev->name[3] - '0';
+	port_id = (!strncmp(g_product_id, "WAC564", strlen(g_product_id))) ? (interface_no + 1) : (PORT_START_NUM - interface_no);
+
+	if (br->fal_stp_set_port_state) {
+
+		switch (p->state) {
+			case BR_STATE_DISABLED:
+				br->fal_stp_set_port_state(port_id, SWITCH_STP_STATE_DISABLING);
+				break;
+			case BR_STATE_LISTENING:
+				/* br->fal_stp_set_port_state(port_id, SWITCH_STP_STATE_LISTENING); */ /* Disabled to reduce the number of state switching */
+				br_fdb_delete_by_port(br, p, 0);
+				br_multicast_disable_port(p);
+				break;
+			case BR_STATE_LEARNING:
+				br->fal_stp_set_port_state(port_id, SWITCH_STP_STATE_LEARNING);
+				break;
+			case BR_STATE_FORWARDING:
+				br->fal_stp_set_port_state(port_id, SWITCH_STP_STATE_FORWARDING);
+				break;
+			case BR_STATE_BLOCKING:
+				br->fal_stp_set_port_state(port_id, SWITCH_STP_STATE_DISABLING);
+				break;
+		}
+	}
+}
+
 void br_log_state(const struct net_bridge_port *p)
 {
 	br_info(p->br, "port %u(%s) entered %s state\n",
@@ -108,6 +158,7 @@ static void br_root_port_block(const struct net_bridge *br,
 		  (unsigned int) p->port_no, p->dev->name);
 
 	p->state = BR_STATE_LISTENING;
+	set_port_state_on_switch(p);
 	br_log_state(p);
 	br_ifinfo_notify(RTM_NEWLINK, p);
 
@@ -346,7 +397,7 @@ void br_config_bpdu_generation(struct net_bridge *br)
 	struct net_bridge_port *p;
 
 	list_for_each_entry(p, &br->port_list, list) {
-		if (p->state != BR_STATE_DISABLED &&
+		if (p->state != BR_STATE_DISABLED && p->state != BR_STATE_BLOCKING &&
 		    br_is_designated_port(p))
 			br_transmit_config(p);
 	}
@@ -379,7 +430,7 @@ void br_become_designated_port(struct net_bridge_port *p)
 
 
 /* called under bridge lock */
-static void br_make_blocking(struct net_bridge_port *p)
+void br_make_blocking(struct net_bridge_port *p)
 {
 	if (p->state != BR_STATE_DISABLED &&
 	    p->state != BR_STATE_BLOCKING) {
@@ -388,6 +439,7 @@ static void br_make_blocking(struct net_bridge_port *p)
 			br_topology_change_detection(p->br);
 
 		p->state = BR_STATE_BLOCKING;
+		set_port_state_on_switch(p);
 		br_log_state(p);
 		br_ifinfo_notify(RTM_NEWLINK, p);
 
@@ -412,6 +464,7 @@ static void br_make_forwarding(struct net_bridge_port *p)
 	else
 		p->state = BR_STATE_LEARNING;
 
+	set_port_state_on_switch(p);
 	br_multicast_enable_port(p);
 	br_log_state(p);
 	br_ifinfo_notify(RTM_NEWLINK, p);
@@ -442,7 +495,9 @@ void br_port_state_selection(struct net_bridge *br)
 			} else {
 				p->config_pending = 0;
 				p->topology_change_ack = 0;
+				del_timer(&p->bpdu_timer);
 				br_make_blocking(p);
+				p->loop_detected++;
 			}
 		}
 
@@ -463,12 +518,42 @@ static void br_topology_change_acknowledge(struct net_bridge_port *p)
 	br_transmit_config(p);
 }
 
+static int br_check(const struct net_bridge_port *p,
+				   const struct br_config_bpdu *bpdu)
+{
+	int t;
+
+	t = memcmp(&bpdu->root, &p->designated_root, 8);
+	if (t < 0)
+		return 1;
+	else if (t > 0)
+		return 0;
+
+	if (bpdu->root_path_cost < p->designated_cost)
+		return 1;
+	else if (bpdu->root_path_cost > p->designated_cost)
+		return 0;
+
+	t = memcmp(&bpdu->bridge_id, &p->designated_bridge, 8);
+	if (t < 0)
+		return 1;
+	else if (t > 0)
+		return 0;
+
+	if (memcmp(&bpdu->bridge_id, &p->br->bridge_id, 8))
+		return 1;
+	return 0;
+}
+
 /* called under bridge lock */
 void br_received_config_bpdu(struct net_bridge_port *p,
 			     const struct br_config_bpdu *bpdu)
 {
 	struct net_bridge *br;
 	int was_root;
+	struct net_bridge_port *p1;
+	struct br_config_bpdu bpdu1;
+	unsigned int i = 0;
 
 	br = p->br;
 	was_root = br_is_root_bridge(br);
@@ -496,7 +581,67 @@ void br_received_config_bpdu(struct net_bridge_port *p,
 				br_topology_change_acknowledged(br);
 		}
 	} else if (br_is_designated_port(p)) {
-		br_reply(p);
+		if (!br_check(p, bpdu) && (bpdu->port_id > p->designated_port)) {
+			list_for_each_entry(p1, &br->port_list, list) {
+				if ((bpdu->port_id == p1->port_id) && (IS_WIRED_LAN(p1->dev)) && (p1->state != BR_STATE_DISABLED) && (p1->state != BR_STATE_BLOCKING)) {
+					memcpy(&bpdu1, bpdu, sizeof(struct br_config_bpdu));
+					bpdu1.port_id = p->port_id;
+					br_record_config_information(p1, &bpdu1);
+					br_configuration_update(br);
+					br_port_state_selection(br);
+
+					if (!br_is_root_bridge(br) && was_root) {
+						del_timer(&br->hello_timer);
+						if (br->topology_change_detected) {
+							del_timer(&br->topology_change_timer);
+							br_transmit_tcn(br);
+
+							mod_timer(&br->tcn_timer,
+								  jiffies + br->bridge_hello_time);
+						}
+					}
+
+					if (p1->port_no == br->root_port) {
+						br_record_config_timeout_values(br, bpdu);
+						br_config_bpdu_generation(br);
+						if (bpdu->topology_change_ack)
+							br_topology_change_acknowledged(br);
+					}
+				}
+			}
+		} else {
+			br_reply(p);
+		}
+	} else {
+		if (!br_check(p, bpdu) && (bpdu->port_id > p->designated_port)) {
+			list_for_each_entry(p1, &br->port_list, list) {
+				if ((bpdu->port_id == p1->port_id) && (IS_WIRED_LAN(p1->dev)) && (p1->state != BR_STATE_DISABLED) && (p1->state != BR_STATE_BLOCKING)) {
+					memcpy(&bpdu1, bpdu, sizeof(struct br_config_bpdu));
+					bpdu1.port_id = p->port_id;
+					br_record_config_information(p1, &bpdu1);
+					br_configuration_update(br);
+					br_port_state_selection(br);
+
+					if (!br_is_root_bridge(br) && was_root) {
+						del_timer(&br->hello_timer);
+						if (br->topology_change_detected) {
+							del_timer(&br->topology_change_timer);
+							br_transmit_tcn(br);
+
+							mod_timer(&br->tcn_timer,
+								  jiffies + br->bridge_hello_time);
+						}
+					}
+
+					if (p1->port_no == br->root_port) {
+						br_record_config_timeout_values(br, bpdu);
+						br_config_bpdu_generation(br);
+						if (bpdu->topology_change_ack)
+							br_topology_change_acknowledged(br);
+					}
+				}
+			}
+		}
 	}
 }
 
diff --git a/net/bridge/br_stp_bpdu.c b/net/bridge/br_stp_bpdu.c
index 27104ed..6d87413 100644
--- a/net/bridge/br_stp_bpdu.c
+++ b/net/bridge/br_stp_bpdu.c
@@ -176,6 +176,7 @@ void br_stp_rcv(const struct stp_proto *proto, struct sk_buff *skb,
 		br_notice(br, "BPDU received on blocked port %u(%s)\n",
 			  (unsigned int) p->port_no, p->dev->name);
 		br_stp_disable_port(p);
+		set_port_state_on_switch(p);
 		goto out;
 	}
 
diff --git a/net/bridge/br_stp_if.c b/net/bridge/br_stp_if.c
index 15022fd..b9d4555 100644
--- a/net/bridge/br_stp_if.c
+++ b/net/bridge/br_stp_if.c
@@ -68,6 +68,11 @@ void br_stp_disable_bridge(struct net_bridge *br)
 
 	spin_lock_bh(&br->lock);
 	list_for_each_entry(p, &br->port_list, list) {
+		if (p->state != BR_STATE_FORWARDING) {
+			p->state = BR_STATE_FORWARDING;
+			set_port_state_on_switch(p);
+		}
+
 		if (p->state != BR_STATE_DISABLED)
 			br_stp_disable_port(p);
 
@@ -90,6 +95,7 @@ void br_stp_enable_port(struct net_bridge_port *p)
 	br_port_state_selection(p->br);
 	br_log_state(p);
 	br_ifinfo_notify(RTM_NEWLINK, p);
+	p->loop_detected = 0;
 }
 
 /* called under bridge lock */
@@ -110,6 +116,7 @@ void br_stp_disable_port(struct net_bridge_port *p)
 	del_timer(&p->message_age_timer);
 	del_timer(&p->forward_delay_timer);
 	del_timer(&p->hold_timer);
+	del_timer(&p->bpdu_timer);
 
 	br_fdb_delete_by_port(br, p, 0);
 	br_multicast_disable_port(p);
@@ -159,6 +166,7 @@ static void br_stp_stop(struct net_bridge *br)
 	int r;
 	char *argv[] = { BR_STP_PROG, br->dev->name, "stop", NULL };
 	char *envp[] = { NULL };
+	struct net_bridge_port *p;
 
 	if (br->stp_enabled == BR_USER_STP) {
 		r = call_usermodehelper(BR_STP_PROG, argv, envp, UMH_WAIT_PROC);
@@ -168,7 +176,16 @@ static void br_stp_stop(struct net_bridge *br)
 		spin_lock_bh(&br->lock);
 		br_port_state_selection(br);
 		spin_unlock_bh(&br->lock);
-	}
+	} else if (br->stp_enabled == BR_KERNEL_STP) {
+		spin_lock_bh(&br->lock);
+		list_for_each_entry(p, &br->port_list, list) {
+				if ((IS_WIRED_LAN(p->dev)) && (p->state != BR_STATE_FORWARDING)) {
+		        		p->state = BR_STATE_FORWARDING;
+		        		set_port_state_on_switch(p);
+				}
+		}
+		spin_unlock_bh(&br->lock);
+    }
 
 	br->stp_enabled = BR_NO_STP;
 }
diff --git a/net/bridge/br_stp_timer.c b/net/bridge/br_stp_timer.c
index 558c46d..fff3634 100644
--- a/net/bridge/br_stp_timer.c
+++ b/net/bridge/br_stp_timer.c
@@ -45,6 +45,33 @@ static void br_hello_timer_expired(unsigned long arg)
 	spin_unlock(&br->lock);
 }
 
+static void br_bpdu_timer_expired(unsigned long arg)
+{
+	struct net_bridge_port *p = (struct net_bridge_port *) arg;
+	struct net_bridge *br = p->br;
+	unsigned int i = 0;
+
+	if (p->state == BR_STATE_DISABLED)
+		return;
+
+	printk(KERN_INFO "port %u(%s) bpdu timer expired loop formed %d\n",
+		(unsigned int) p->port_no, p->dev->name, p->loop_detected);
+
+	spin_lock(&br->lock);
+	if (p->state == BR_STATE_DISABLED)
+		goto unlock;
+
+	if (p->loop_detected > 2) {
+		br_make_blocking(p);
+	    mod_timer(&p->message_age_timer, jiffies + p->br->max_age);
+	    printk(KERN_INFO "Blocking in %s\n", __func__);
+		p->loop_detected = 0;
+	}
+
+ unlock:
+	spin_unlock(&br->lock);
+}
+
 static void br_message_age_timer_expired(unsigned long arg)
 {
 	struct net_bridge_port *p = (struct net_bridge_port *) arg;
@@ -72,6 +99,7 @@ static void br_message_age_timer_expired(unsigned long arg)
 	br_become_designated_port(p);
 	br_configuration_update(br);
 	br_port_state_selection(br);
+	mod_timer(&p->bpdu_timer, jiffies + (3 * br->forward_delay));
 	if (br_is_root_bridge(br) && !was_root)
 		br_become_root_bridge(br);
  unlock:
@@ -88,10 +116,12 @@ static void br_forward_delay_timer_expired(unsigned long arg)
 	spin_lock(&br->lock);
 	if (p->state == BR_STATE_LISTENING) {
 		p->state = BR_STATE_LEARNING;
+		set_port_state_on_switch(p);
 		mod_timer(&p->forward_delay_timer,
 			  jiffies + br->forward_delay);
 	} else if (p->state == BR_STATE_LEARNING) {
 		p->state = BR_STATE_FORWARDING;
+		set_port_state_on_switch(p);
 		if (br_is_designated_for_some_port(br))
 			br_topology_change_detection(br);
 		netif_carrier_on(br->dev);
@@ -164,6 +194,9 @@ void br_stp_port_timer_init(struct net_bridge_port *p)
 
 	setup_timer(&p->hold_timer, br_hold_timer_expired,
 		      (unsigned long) p);
+
+	setup_timer(&p->bpdu_timer, br_bpdu_timer_expired,
+		      (unsigned long) p);
 }
 
 /* Report ticks left (in USER_HZ) used for API */
