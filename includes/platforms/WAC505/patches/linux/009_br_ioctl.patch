diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index 6b4eccc..a63b61a 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -1472,6 +1472,10 @@ struct net_device {
 	struct net		*nd_net;
 #endif
 
+	/* bridge stuff */
+        struct net_bridge_port  *br_port;
+
+
 	/* mid-layer private */
 	union {
 		void				*ml_priv;
diff --git a/include/uapi/linux/if_bridge.h b/include/uapi/linux/if_bridge.h
index 39f621a..769946c 100644
--- a/include/uapi/linux/if_bridge.h
+++ b/include/uapi/linux/if_bridge.h
@@ -43,6 +43,12 @@
 #define BRCTL_SET_PORT_PRIORITY 16
 #define BRCTL_SET_PATH_COST 17
 #define BRCTL_GET_FDB_ENTRIES 18
+#define BRCTL_ADD_RULE 19
+#define BRCTL_DEL_RULE 20
+#define BRCTL_LIST_RULE 21
+#define BRCTL_SET_CASCADED_BRIDGE 22
+
+
 
 #define BR_STATE_DISABLED 0
 #define BR_STATE_LISTENING 1
@@ -53,6 +59,7 @@
 struct __bridge_info {
 	__u64 designated_root;
 	__u64 bridge_id;
+        __u16 cascaded_bridge;
 	__u32 root_path_cost;
 	__u32 max_age;
 	__u32 hello_time;
@@ -94,7 +101,7 @@ struct __fdb_entry {
 	__u8 is_local;
 	__u32 ageing_timer_value;
 	__u8 port_hi;
-	__u8 pad0;
+        __u8 is_cascade;
 	__u16 unused;
 };
 
diff --git a/net/Kconfig b/net/Kconfig
index a43fdf3..9481540 100644
--- a/net/Kconfig
+++ b/net/Kconfig
@@ -204,6 +204,15 @@ config HTTP_REDIRECT_ENABLED
 
        	If unsure, say N.
 
+config BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+        bool "Bridge Cascading"
+        depends on BRIDGE
+        default n
+        ---help---
+          Enabling this option will allow bridge cascading.
+
+          If unsure, say N.
+
 
 source "net/netfilter/Kconfig"
 source "net/ipv4/netfilter/Kconfig"
diff --git a/net/bridge/Makefile b/net/bridge/Makefile
index 3fa8307..7eefe18 100644
--- a/net/bridge/Makefile
+++ b/net/bridge/Makefile
@@ -6,7 +6,7 @@ obj-$(CONFIG_BRIDGE) += bridge.o
 
 bridge-y	:= br.o br_device.o br_fdb.o br_forward.o br_if.o br_input.o \
 			br_ioctl.o br_notify.o br_stp.o br_stp_bpdu.o \
-			br_stp_if.o br_stp_timer.o br_netlink.o br_hrdb.o br_event.o
+			br_stp_if.o br_stp_timer.o br_hook.o br_netlink.o br_hrdb.o br_event.o
 
 bridge-$(CONFIG_SYSFS) += br_sysfs_if.o br_sysfs_br.o
 
diff --git a/net/bridge/br_device.c b/net/bridge/br_device.c
index b0b4cd1..7bfd5c9 100644
--- a/net/bridge/br_device.c
+++ b/net/bridge/br_device.c
@@ -59,6 +59,17 @@ netdev_tx_t br_dev_xmit(struct sk_buff *skb, struct net_device *dev)
 	if (!br_allowed_ingress(br, br_get_vlan_info(br), skb, &vid))
 		goto out;
 
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+        if (br->cascaded_bridge) {
+                dst = __br_fdb_get(br, eth_hdr(skb)->h_source, vid);
+                if (dst) {
+                        if (!dst->is_local)
+                                br_fdb_update(br, NULL, eth_hdr(skb)->h_source, vid, true);
+                } else if (!is_multicast_ether_addr(eth_hdr(skb)->h_source))
+                                br_fdb_update(br, NULL, eth_hdr(skb)->h_source, vid, true);
+        }
+#endif
+
 	get_dst_hook = rcu_dereference(br_get_dst_hook);
 
 	if (is_broadcast_ether_addr(dest))
@@ -406,5 +417,10 @@ void br_dev_setup(struct net_device *dev)
 
 	br_netfilter_rtable_init(br);
 	br_stp_timer_init(br);
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+        br->cascaded_bridge = 0;
+        dev->hard_header_len += VLAN_HLEN;
+#endif
+
 	br_multicast_init(br);
 }
diff --git a/net/bridge/br_fdb.c b/net/bridge/br_fdb.c
index 1d83c1f..04f7b27 100644
--- a/net/bridge/br_fdb.c
+++ b/net/bridge/br_fdb.c
@@ -406,10 +406,20 @@ int br_fdb_fillbuf(struct net_bridge *br, void *buf,
 			/* convert from internal format to API */
 			memcpy(fe->mac_addr, f->addr.addr, ETH_ALEN);
 
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+                        if (f->is_cascade) {
+                                fe->is_cascade = f->is_cascade;
+
+                        } else {
+#endif
 			/* due to ABI compat need to split into hi/lo */
 			fe->port_no = f->dst->port_no;
 			fe->port_hi = f->dst->port_no >> 8;
 
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+                        }
+#endif
+
 			fe->is_local = f->is_local;
 			if (!f->is_static)
 				fe->ageing_timer_value = jiffies_delta_to_clock_t(jiffies - f->updated);
@@ -466,6 +476,11 @@ static struct net_bridge_fdb_entry *fdb_create(struct hlist_head *head,
 		fdb->vlan_id = vid;
 		fdb->is_local = 0;
 		fdb->is_static = 0;
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+                fdb->is_cascade = 0;
+                if (fdb->dst == NULL)
+                        fdb->is_cascade = 1;
+#endif
 		fdb->added_by_user = 0;
 		fdb->updated = fdb->used = jiffies;
 		hlist_add_head_rcu(&fdb->hlist, head);
@@ -527,19 +542,29 @@ void br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
 		return;
 
 	/* ignore packets unless we are using this port */
-	if (!(source->state == BR_STATE_LEARNING ||
-	      source->state == BR_STATE_FORWARDING))
-		return;
+
+#ifndef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+        if (!(source->state == BR_STATE_LEARNING ||
+#else
+        /* Source could be NULL in the case of cascaded fdb */
+        if (source && !(source->state == BR_STATE_LEARNING ||
+#endif
+        source->state == BR_STATE_FORWARDING))
+                return;
 
 	fdb = fdb_find_rcu(head, addr, vid);
 	if (likely(fdb)) {
 		/* attempt to update an entry for a local interface */
 		if (unlikely(fdb->is_local)) {
-			if (net_ratelimit())
-				br_warn(br, "received packet on %s with "
-					"own address as source address\n",
-					source->dev->name);
-		} else {
+			if (net_ratelimit()) {
+				/* Incase of cascading enabled, don't print this as this is expected */
+				if(source != NULL && source->dev != NULL && source->dev->name != NULL) {
+					br_warn(br, "received packet on %s with "
+						    "own address as source address\n",
+						    source->dev->name);
+				}
+				}
+			} else {
 			/* fastpath: update of existing entry */
 			if (unlikely(source != fdb->dst)) {
 				fdb->dst = source;
@@ -547,6 +572,11 @@ void br_fdb_update(struct net_bridge *br, struct net_bridge_port *source,
 					&br_fdb_update_notifier_list,
 					0, (void *)addr);
 			}
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+                        fdb->is_cascade = 0;
+                        if (fdb->dst == NULL)
+                                fdb->is_cascade = 1;
+#endif
 			fdb->updated = jiffies;
 			if (unlikely(added_by_user))
 				fdb->added_by_user = 1;
@@ -610,7 +640,7 @@ static int fdb_to_nud(const struct net_bridge_fdb_entry *fdb)
 		return NUD_PERMANENT;
 	else if (fdb->is_static)
 		return NUD_NOARP;
-	else if (has_expired(fdb->dst->br, fdb))
+	else if (fdb->dst && has_expired(fdb->dst->br, fdb))
 		return NUD_STALE;
 	else
 		return NUD_REACHABLE;
diff --git a/net/bridge/br_forward.c b/net/bridge/br_forward.c
index 9cbc015..8c61089 100644
--- a/net/bridge/br_forward.c
+++ b/net/bridge/br_forward.c
@@ -19,7 +19,9 @@
 #include <linux/skbuff.h>
 #include <linux/if_vlan.h>
 #include <linux/netfilter_bridge.h>
+#include <linux/br_hook_defs.h>
 #include "br_private.h"
+#include "br_hook.h"
 
 static int deliver_clone(const struct net_bridge_port *prev,
 			 struct sk_buff *skb,
@@ -30,10 +32,20 @@ static int deliver_clone(const struct net_bridge_port *prev,
 static inline int should_deliver(const struct net_bridge_port *p,
 				 const struct sk_buff *skb)
 {
+#ifndef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
 	const unsigned char *dest = eth_hdr(skb)->h_dest;
 	return ((skb->dev != p->dev) || ((p->flags & BR_HAIRPIN_MODE) && (!is_multicast_ether_addr(dest)))) &&
 		br_allowed_egress(p->br, nbp_get_vlan_info(p), skb) &&
 		p->state == BR_STATE_FORWARDING;
+#else
+        if (p == NULL || /* This is true in the case of of cascading fdb */
+                skb->dev == p->dev ||
+                p->state != BR_STATE_FORWARDING)
+                        return 0;
+
+        return 1;
+#endif
+
 }
 
 static inline unsigned int packet_length(const struct sk_buff *skb)
@@ -58,9 +70,16 @@ int br_dev_queue_push_xmit(struct sk_buff *skb)
 
 int br_forward_finish(struct sk_buff *skb)
 {
+#ifndef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
 	return BR_HOOK(NFPROTO_BRIDGE, NF_BR_POST_ROUTING, skb, NULL, skb->dev,
 		       br_dev_queue_push_xmit);
+#else
+        if(__BR_HOOK(BR_POSTROUTING, &skb, NULL, skb->dev) != BR_DROP)
+                NF_HOOK(PF_BRIDGE, NF_BR_POST_ROUTING, skb, NULL, skb->dev,
+                                br_dev_queue_push_xmit);
 
+        return 0;
+#endif
 }
 
 static void __br_deliver(const struct net_bridge_port *to, struct sk_buff *skb)
diff --git a/net/bridge/br_hook.c b/net/bridge/br_hook.c
new file mode 100644
index 0000000..e71a649
--- /dev/null
+++ b/net/bridge/br_hook.c
@@ -0,0 +1,420 @@
+/*
+ * br_hook.c
+ *
+ * Copyright (c) Arada Systems, 1996-2007
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/netdevice.h>
+#include <linux/skbuff.h>
+#include <linux/netfilter_bridge.h>
+#include <linux/if_ether.h>
+#include <linux/if_vlan.h>
+#include <net/sock.h>
+#include <linux/br_hook_defs.h>
+#include "br_private.h"
+#include "br_hook.h"
+
+/*************** Macros ***************/
+#define BR_RULE_NULL \
+{ \
+	.br = NULL, \
+	.indev = NULL, \
+	.outdev = NULL, \
+	.pkt_type = 0, \
+	.target = 0, \
+	.arg = 0, \
+}
+
+#define BR_RULE_CLEAR(__br_rule) \
+{ \
+	__br_rule->br = NULL; \
+	__br_rule->indev = NULL; \
+	__br_rule->outdev = NULL; \
+	__br_rule->pkt_type = 0; \
+	__br_rule->target = 0; \
+	__br_rule->arg = 0; \
+}
+
+#define BR_RULE_COPY(__dst, __src) \
+{ \
+	__dst->br = __src->br; \
+	__dst->indev = __src->indev; \
+	__dst->outdev = __src->outdev; \
+	__dst->pkt_type = __src->pkt_type; \
+	__dst->target = __src->target; \
+	__dst->arg = __src->arg; \
+}
+
+#define BR_RULE_CMP(__rule, __match) \
+({ \
+	int __no_match = 0; \
+	if (__match->br && __match->br != __rule->br) \
+		__no_match = 1; \
+	if (__match->indev && __match->indev != __rule->indev) \
+		__no_match = 1; \
+	if (__match->outdev && __match->outdev != __rule->outdev) \
+		__no_match = 1; \
+	if (__match->pkt_type && __match->pkt_type != __rule->pkt_type) \
+		__no_match = 1; \
+	if (__match->target && __match->target != __rule->target) \
+		__no_match = 1; \
+	if (__match->arg && __match->arg != __rule->arg) \
+		__no_match = 1; \
+ 	__no_match; \
+})
+
+#define BR_RULE_PUSH(__br_hook) \
+{ \
+	int __i; \
+	for (__i = __br_hook->num_rules; __i > 0; __i--) { \
+		BR_RULE_COPY((&__br_hook->br_rules[__i]), (&__br_hook->br_rules[__i-1])); \
+	} \
+}
+
+#define BR_RULE_PULL(__br_hook, __position) \
+{ \
+	int __i; \
+	for (__i = __position; __i < __br_hook->num_rules-1; __i++) { \
+		BR_RULE_COPY((&__br_hook->br_rules[__i]), (&__br_hook->br_rules[__i+1])); \
+	} \
+}
+
+
+/*************** Forward Definitions ***************/
+int add_8021q_tag_and_continue(struct sk_buff **pskb, int hook, int arg);
+int rem_8021q_tag_and_continue(struct sk_buff **pskb, int hook, int arg);
+int accept_eapol(struct sk_buff **pskb, int hook, int arg);
+
+
+/*************** Globals ***************/
+int (*br_targets[])(struct sk_buff **pskb, int hook, int arg) =
+{
+	NULL,
+	add_8021q_tag_and_continue,
+	rem_8021q_tag_and_continue,
+	accept_eapol
+};
+
+struct bridge_hook br_hooks[] =
+{
+	{
+		.name = "BR_PREROUTING",
+		.lock = __SPIN_LOCK_UNLOCKED(br_hooks[0].lock),
+		.num_rules = 0,
+		.br_rules = {BR_RULE_NULL,BR_RULE_NULL,BR_RULE_NULL,BR_RULE_NULL,
+				BR_RULE_NULL,BR_RULE_NULL,BR_RULE_NULL,BR_RULE_NULL}
+	},
+	{
+		.name = "BR_POSTROUTING",
+		.lock = __SPIN_LOCK_UNLOCKED(br_hooks[1].lock),
+		.num_rules = 0,
+		.br_rules = {BR_RULE_NULL,BR_RULE_NULL,BR_RULE_NULL,BR_RULE_NULL,
+				BR_RULE_NULL,BR_RULE_NULL,BR_RULE_NULL,BR_RULE_NULL}
+	},
+	{
+		.name = "BR_INPUT",
+		.lock = __SPIN_LOCK_UNLOCKED(br_hooks[2].lock),
+		.num_rules = 0,
+		.br_rules = {BR_RULE_NULL,BR_RULE_NULL,BR_RULE_NULL,BR_RULE_NULL,
+				BR_RULE_NULL,BR_RULE_NULL,BR_RULE_NULL,BR_RULE_NULL}
+	}
+};
+
+
+/*************** Utility functions ***************/
+static int BR_HOOK_ADD(int hook,
+			int position,
+			struct bridge_rule *br_rule)
+{
+	struct bridge_hook *br_hook = &br_hooks[hook];
+	int i;
+
+	spin_lock(&br_hook->lock);
+
+	if (br_hook->num_rules >= MAX_RULES) {
+		spin_unlock(&br_hook->lock);
+		printk(KERN_ERR "br_hook %s: No place left to add new rule\n", br_hook->name);
+		return -1;
+	}
+
+	for (i = 0; i < br_hook->num_rules; i++) {
+		if (!BR_RULE_CMP((&br_hook->br_rules[i]), br_rule)) {
+			spin_unlock(&br_hook->lock);
+			printk(KERN_ERR "br_hook %s: Rule already exists\n", br_hook->name);
+			return -1;
+		}
+	}
+
+	switch (position) {
+		case BR_FIRST:
+			BR_RULE_PUSH(br_hook);
+			BR_RULE_COPY((&br_hook->br_rules[0]), br_rule);
+			br_hook->num_rules++;
+			break;
+		case BR_NEXT:
+			BR_RULE_COPY((&br_hook->br_rules[br_hook->num_rules]), br_rule);
+			br_hook->num_rules++;
+			break;
+		default:
+			printk(KERN_ERR "br_hook: Unknown position %d to add a rule\n", position);
+			spin_unlock(&br_hook->lock);
+			return -1;
+	}
+
+	spin_unlock(&br_hook->lock);
+
+	return 0;
+}
+
+static int BR_HOOK_DEL(int hook,
+			struct bridge_rule *br_rule)
+{
+	struct bridge_hook *br_hook = &br_hooks[hook];
+	int i;
+
+	spin_lock(&br_hook->lock);
+
+	if (br_hook->num_rules == 0) {
+		spin_unlock(&br_hook->lock);
+		printk(KERN_ERR "br_hook %s: No more rules to delete\n", br_hook->name);
+		return -1;
+	}
+
+	while (br_hook->num_rules) {
+		int deleted = 0;
+		for (i = 0; i < br_hook->num_rules; i++) {
+			if (!BR_RULE_CMP((&br_hook->br_rules[i]), br_rule)) {
+				BR_RULE_PULL(br_hook, i);
+				br_hook->num_rules--;
+				BR_RULE_CLEAR((&br_hook->br_rules[br_hook->num_rules]));
+				deleted = 1;
+				break;
+			}
+		}
+		if (!deleted)
+			break;
+	}
+
+	spin_unlock(&br_hook->lock);
+
+	return 0;
+}
+
+int add_br_hook_rule(struct net *net,
+                        int hook,
+			int position,
+			char *bridge,
+			char *indev,
+			char *outdev,
+			unsigned int pkt_type,
+			int target,
+			int arg)
+{
+	struct net_bridge *br = NULL;
+	struct net_device *br_dev = NULL;
+	struct net_device *in = NULL;
+	struct net_device *out = NULL;
+	struct bridge_rule br_rule;
+
+	if (strcmp(bridge, "*")) {
+		br_dev = dev_get_by_name(net, bridge);
+		if (!br_dev)
+			return -1;
+		br = (struct net_bridge *)netdev_priv(br_dev);
+		dev_put(br_dev);
+	}
+
+	if (strcmp(indev, "*")) {
+		in = dev_get_by_name(net, indev);
+		if (!in)
+			return -1;
+		dev_put(in);
+	}
+
+	if (strcmp(outdev, "*")) {
+		out = dev_get_by_name(net, outdev);
+		if (!out)
+			return -1;
+		dev_put(out);
+	}
+
+	br_rule.br = br;
+	br_rule.indev = in;
+	br_rule.outdev = out;
+	br_rule.pkt_type = pkt_type;
+	br_rule.target = target;
+	br_rule.arg = arg;
+
+	return BR_HOOK_ADD(hook, position, &br_rule);
+}
+
+int del_br_hook_rule(struct net *net,
+                        int hook,
+			char *bridge,
+			char *indev,
+			char *outdev,
+			unsigned int pkt_type,
+			int target,
+			int arg)
+{
+	struct net_bridge *br = NULL;
+	struct net_device *br_dev = NULL;
+	struct net_device *in = NULL;
+	struct net_device *out = NULL;
+	struct bridge_rule br_rule;
+
+	if (strcmp(bridge, "*")) {
+		br_dev = dev_get_by_name(net, bridge);
+		if (!br_dev)
+			return -1;
+		br = (struct net_bridge *)netdev_priv(br_dev);
+		dev_put(br_dev);
+	}
+
+	if (strcmp(indev, "*")) {
+		in = dev_get_by_name(net, indev);
+		if (!in)
+			return -1;
+		dev_put(in);
+	}
+
+	if (strcmp(outdev, "*")) {
+		out = dev_get_by_name(net, outdev);
+		if (!out)
+			return -1;
+		dev_put(out);
+	}
+
+	br_rule.br = br;
+	br_rule.indev = in;
+	br_rule.outdev = out;
+	br_rule.pkt_type = pkt_type;
+	br_rule.target = target;
+	br_rule.arg = arg;
+
+	return BR_HOOK_DEL(hook, &br_rule);
+}
+
+int get_next_br_hook_rule(int hook,
+				int *cookie,
+				char *bridge,
+				char *indev,
+				char *outdev,
+				unsigned int *pkt_type,
+				int *target,
+				int *arg)
+{
+	struct bridge_hook *br_hook = &br_hooks[hook];
+	struct bridge_rule *br_rule;
+
+	spin_lock(&br_hook->lock);
+
+	if (*cookie >= 0 && *cookie < br_hook->num_rules) {
+		br_rule = &br_hook->br_rules[*cookie];
+		(*cookie)++;
+
+		if (br_rule->br)
+			strcpy(bridge, br_rule->br->dev->name);
+		else
+			strcpy(bridge, "*");
+
+		if (br_rule->indev)
+			strcpy(indev, br_rule->indev->name);
+		else
+			strcpy(indev, "*");
+
+		if (br_rule->outdev)
+			strcpy(outdev, br_rule->outdev->name);
+		else
+			strcpy(outdev, "*");
+
+		*pkt_type = br_rule->pkt_type;
+
+		*target = br_rule->target;
+
+		*arg = br_rule->arg;
+	} else {
+		*cookie = -1;
+	}
+
+	spin_unlock(&br_hook->lock);
+
+	return 0;
+}
+
+
+/*************** Taget functions ***************/
+/* Add 802_1Q tag */
+int add_8021q_tag_and_continue(struct sk_buff **pskb,
+		int hook,
+		int arg)
+{
+	if (hook != BR_PREROUTING)
+		return BR_CONTINUE;
+
+	if (skb_shared((*pskb)) || skb_cloned((*pskb))) {
+		struct sk_buff *nskb;
+
+		nskb = skb_copy((*pskb), GFP_ATOMIC);
+		if (!nskb) {
+			printk(KERN_ERR "%s#%d: failed to copy skb\n",
+					__FILE__, __LINE__);
+			kfree_skb(*pskb);
+			return BR_DROP;
+		}
+		if ((*pskb)->sk)
+			skb_set_owner_w(nskb, (*pskb)->sk);
+		kfree_skb((*pskb));
+		*pskb = nskb;
+	}
+
+	(*pskb)->vlan_tci = VLAN_CFI_MASK | ( arg & VLAN_VID_MASK);
+	(*pskb)->vlan_proto = htons(ETH_P_8021Q);
+
+	return BR_CONTINUE;
+}
+
+/* Remove 802_1Q tag */
+int rem_8021q_tag_and_continue(struct sk_buff **pskb,
+		int hook,
+		int arg)
+{
+	if (hook != BR_POSTROUTING)
+		return BR_CONTINUE;
+
+	if(vlan_tx_tag_get_id(*pskb) != arg)
+		return BR_CONTINUE;
+
+	if (skb_shared(*pskb) || skb_cloned(*pskb)) {
+		struct sk_buff *nskb;
+
+		nskb = skb_copy(*pskb, GFP_ATOMIC);
+		if (!nskb) {
+			kfree_skb(*pskb);
+			return NF_DROP;
+		}
+		if ((*pskb)->sk)
+			skb_set_owner_w(nskb, (*pskb)->sk);
+		kfree_skb(*pskb);
+		*pskb = nskb;
+	}
+
+	(*pskb)->vlan_tci = 0;
+	(*pskb)->vlan_proto = 0;
+
+	return BR_CONTINUE;
+}
+
+/* Accept EAPOL frames */
+int accept_eapol(struct sk_buff **pskb,
+		int hook,
+		int arg)
+{
+	if ((hook != BR_PREROUTING) || ((ntohs(eth_hdr(*pskb)->h_proto)) != 0x888E))
+		return BR_CONTINUE;
+
+	return BR_ACCEPT;
+}
diff --git a/net/bridge/br_hook.h b/net/bridge/br_hook.h
new file mode 100644
index 0000000..c1fd51d
--- /dev/null
+++ b/net/bridge/br_hook.h
@@ -0,0 +1,103 @@
+/*
+ * br_hook.h
+ *
+ * Copyright (c) Arada Systems, 1996-2007
+ *
+ */
+#ifndef _BR_HOOK_H_
+#define _BR_HOOK_H_
+
+/*************** Constants ***************/
+#define MAX_RULES	8
+
+/* Verdicts */
+#define BR_CONTINUE	0
+#define BR_ACCEPT	1
+#define BR_DROP		2
+
+
+/*************** Data types ***************/
+
+struct bridge_rule {
+	struct net_bridge	*br;
+	struct net_device 	*indev;
+	struct net_device 	*outdev;
+	unsigned int		pkt_type;
+	int			target;
+	int			arg;
+};
+
+struct bridge_hook {
+	char name[32];
+	spinlock_t lock;
+	int num_rules;
+	struct bridge_rule br_rules[MAX_RULES];
+};
+
+
+/*************** Macros ***************/
+#define PKT_TYPE_MATCH(match, pkt_type) \
+({ \
+	int ret; \
+	if (match & 0xFFFF0000) { \
+		if ((match & 0xFFFF) == pkt_type) \
+ 			ret = 0; \
+ 		else \
+ 			ret = 1; \
+	} else { \
+ 		if ((match & 0xFFFF) == pkt_type) \
+ 			ret = 1; \
+ 		else \
+ 			ret = 0; \
+ 	} \
+ 	ret; \
+})
+
+
+/*************** Forward Definitions ***************/
+extern int (*br_targets[])(struct sk_buff **pskb, int hook, int arg);
+extern struct bridge_hook br_hooks[];
+
+extern int add_br_hook_rule(struct net *net, int hook, int position, char *bridge, char *indev, char *outdev,
+				unsigned int pkt_type, int target, int arg);
+extern int del_br_hook_rule(struct net *net, int hook, char *bridge, char *indev, char *outdev,
+				unsigned int pkt_type, int target, int arg);
+extern int get_next_br_hook_rule(int hook, int *cookie, char *bridge, char *indev, char *outdev,
+				unsigned int *pkt_type, int *target, int *arg);
+
+/*************** Functions ***************/
+static inline int __BR_HOOK(int hook, struct sk_buff **pskb,
+				struct net_device *indev,
+				struct net_device *outdev)
+{
+ 	struct net_bridge_port *br_port = rcu_dereference((*pskb)->dev->br_port);
+	struct net_bridge *br;
+	struct bridge_hook *br_hook;
+	struct bridge_rule *br_rule;
+	int i, verdict = BR_CONTINUE;
+
+	if (!br_port)
+		return -1;
+	br = br_port->br;
+
+	br_hook = &br_hooks[hook];
+	spin_lock(&br_hook->lock);
+
+	for (i = 0; i < br_hook->num_rules; i++) {
+		br_rule = &br_hook->br_rules[i];
+		if ((!br_rule->br || br_rule->br == br) &&
+			(!br_rule->indev || br_rule->indev == indev) &&
+			(!br_rule->outdev || br_rule->outdev == outdev) &&
+			(!br_rule->pkt_type || (hook == BR_POSTROUTING && vlan_tx_tag_present(*pskb)) || ((hook == BR_PREROUTING) && !(vlan_tx_tag_present(*pskb))))) {
+
+			verdict = (*br_targets[br_rule->target])(pskb, hook, br_rule->arg);
+		}
+		if (verdict != BR_CONTINUE)
+			break;
+	}
+
+	spin_unlock(&br_hook->lock);
+
+	return verdict;
+}
+#endif /* _BR_HOOK_H_ */
diff --git a/net/bridge/br_if.c b/net/bridge/br_if.c
index 878b9e5..b8b3539 100644
--- a/net/bridge/br_if.c
+++ b/net/bridge/br_if.c
@@ -363,6 +363,8 @@ int br_add_if(struct net_bridge *br, struct net_device *dev)
 
 	call_netdevice_notifiers(NETDEV_JOIN, dev);
 
+	rcu_assign_pointer(dev->br_port, p);
+
 	err = dev_set_promiscuity(dev, 1);
 	if (err)
 		goto put_back;
diff --git a/net/bridge/br_input.c b/net/bridge/br_input.c
index db48f87..2c4a08b 100644
--- a/net/bridge/br_input.c
+++ b/net/bridge/br_input.c
@@ -27,7 +27,7 @@
 #include <linux/export.h>
 #include <linux/rculist.h>
 #include "br_private.h"
-
+#include "br_hook.h"
 
 #ifdef CONFIG_HTTP_REDIRECT_ENABLED
 extern int brhttp_redirect_enabled;
@@ -363,7 +363,12 @@ int br_handle_frame_finish(struct sk_buff *skb)
 		if (!skb)
 			goto out;
 	} else if ((p->flags & BR_ISOLATE_MODE) ||
-		   ((dst = __br_fdb_get(br, dest, vid)) && dst->is_local)) {
+		   ((dst = __br_fdb_get(br, dest, vid)) && (dst->is_local
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+		    || dst->is_cascade)
+#endif
+		   )) {
+
 		skb2 = skb;
 		/* Do not forward the packet since it's local. */
 		skb = NULL;
@@ -498,6 +503,9 @@ forward:
 		if (ether_addr_equal(p->br->dev->dev_addr, dest))
 			skb->pkt_type = PACKET_HOST;
 
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+		if(__BR_HOOK(BR_PREROUTING, &skb, skb->dev, NULL) != BR_DROP)
+#endif
 		BR_HOOK(NFPROTO_BRIDGE, NF_BR_PRE_ROUTING, skb, skb->dev, NULL,
 			br_handle_frame_finish);
 		break;
diff --git a/net/bridge/br_ioctl.c b/net/bridge/br_ioctl.c
index f876f70..9093579 100644
--- a/net/bridge/br_ioctl.c
+++ b/net/bridge/br_ioctl.c
@@ -20,6 +20,9 @@
 #include <net/net_namespace.h>
 #include <asm/uaccess.h>
 #include "br_private.h"
+#include <linux/br_hook_defs.h>
+#include "br_hook.h"
+
 
 static int get_bridge_ifindices(struct net *net, int *indices, int num)
 {
@@ -131,6 +134,9 @@ static int old_dev_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 		rcu_read_lock();
 		memcpy(&b.designated_root, &br->designated_root, 8);
 		memcpy(&b.bridge_id, &br->bridge_id, 8);
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+		b.cascaded_bridge = br->cascaded_bridge;
+#endif
 		b.root_path_cost = br->root_path_cost;
 		b.max_age = jiffies_to_clock_t(br->max_age);
 		b.hello_time = jiffies_to_clock_t(br->hello_time);
@@ -289,6 +295,13 @@ static int old_dev_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 	case BRCTL_GET_FDB_ENTRIES:
 		return get_fdb_entries(br, (void __user *)args[1],
 				       args[2], args[3]);
+
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+        case BRCTL_SET_CASCADED_BRIDGE:
+                br->cascaded_bridge = (unsigned short)args[1];
+                return 0;
+#endif
+
 	}
 
 	return -EOPNOTSUPP;
@@ -343,6 +356,78 @@ static int old_deviceless(struct net *net, void __user *uarg)
 
 		return br_del_bridge(net, buf);
 	}
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+        case BRCTL_ADD_RULE:
+        case BRCTL_DEL_RULE:
+        {
+                struct br_hook_ioctl br_ioc;
+
+                if (copy_from_user(&br_ioc, (void __user*)args[1],
+                                        sizeof(struct br_hook_ioctl)))
+                        return -EFAULT;
+
+                //printk("hook = %d position = %d bridge = %s indev = %s outdev = %s "
+                //"pkt_type = %x target = %d arg = %d\n",
+                //br_ioc.hook, br_ioc.position,
+                //br_ioc.bridge, br_ioc.indev, br_ioc.outdev,
+                //br_ioc.pkt_type, br_ioc.target, br_ioc.arg);
+
+                if (args[0] == BRCTL_ADD_RULE)
+                        return add_br_hook_rule(net,
+                                                br_ioc.hook,
+                                                br_ioc.position,
+                                                br_ioc.bridge,
+                                                br_ioc.indev,
+                                                br_ioc.outdev,
+                                                br_ioc.pkt_type,
+                                                br_ioc.target,
+                                                br_ioc.arg);
+
+                return del_br_hook_rule(net,
+                                        br_ioc.hook,
+                                        br_ioc.bridge,
+                                        br_ioc.indev,
+                                        br_ioc.outdev,
+                                        br_ioc.pkt_type,
+                                        br_ioc.target,
+                                        br_ioc.arg);
+        }
+
+        case BRCTL_LIST_RULE:
+        {
+                int cookie;
+                struct br_hook_ioctl br_ioc;
+
+                if (copy_from_user(&cookie, (void __user*)args[1],
+                                        sizeof(int)))
+                        return -EFAULT;
+
+                if (copy_from_user(&br_ioc, (void __user*)args[2],
+                                        sizeof(struct br_hook_ioctl)))
+                        return -EFAULT;
+
+                if (get_next_br_hook_rule(br_ioc.hook,
+                                                &cookie,
+                                                br_ioc.bridge,
+                                                br_ioc.indev,
+                                                br_ioc.outdev,
+                                                &br_ioc.pkt_type,
+                                                &br_ioc.target,
+                                                &br_ioc.arg))
+                        return -EFAULT;
+
+                if (copy_to_user((void __user*)args[1], &cookie,
+                                        sizeof(int)))
+                        return -EFAULT;
+
+                if (copy_to_user((void __user*)args[2], &br_ioc,
+                                        sizeof(struct br_hook_ioctl)))
+                        return -EFAULT;
+
+                return 0;
+        }
+#endif
+
 	}
 
 	return -EOPNOTSUPP;
diff --git a/net/bridge/br_netfilter.c b/net/bridge/br_netfilter.c
index e377cf3..61e3e54 100644
--- a/net/bridge/br_netfilter.c
+++ b/net/bridge/br_netfilter.c
@@ -51,6 +51,11 @@
 #define snat_took_place(skb, offset) \
 	((skb)->nf_bridge->data[(offset)/sizeof(unsigned long)] != ip_hdr(skb)->saddr)
 
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+static int nf_hooks_registered;
+#endif
+
+
 #ifdef CONFIG_SYSCTL
 static struct ctl_table_header *brnf_sysctl_header;
 static int brnf_call_iptables __read_mostly = 1;
@@ -60,6 +65,10 @@ static int brnf_call_custom __read_mostly;
 static int brnf_filter_vlan_tagged __read_mostly = 0;
 static int brnf_filter_pppoe_tagged __read_mostly = 0;
 static int brnf_pass_vlan_indev __read_mostly = 0;
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+static int brnf_enabled = 1;
+#endif
+
 #else
 #define brnf_call_iptables 1
 #define brnf_call_ip6tables 1
@@ -1024,6 +1033,42 @@ static struct nf_hook_ops br_nf_ops[] __read_mostly = {
 };
 
 #ifdef CONFIG_SYSCTL
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+static
+int brnf_sysctl_call_enabled(ctl_table *ctl, int write,
+                        void __user *buffer, size_t *lenp, loff_t *ppos)
+{
+        int ret;
+
+        ret = proc_dointvec(ctl, write, buffer, lenp, ppos);
+
+        if (write && *(int *)(ctl->data))
+                *(int *)(ctl->data) = 1;
+
+        rcu_read_lock();
+
+        if (write) {
+                if (brnf_enabled) {
+                        if (!nf_hooks_registered) {
+                                nf_register_hooks(br_nf_ops, ARRAY_SIZE(br_nf_ops));
+                                printk(KERN_NOTICE "Bridge firewalling registered\n");
+                                nf_hooks_registered = 1;
+                        }
+                } else {
+                        if (nf_hooks_registered) {
+                                nf_unregister_hooks(br_nf_ops, ARRAY_SIZE(br_nf_ops));
+                                printk(KERN_NOTICE "Bridge firewalling unregistered\n");
+                                nf_hooks_registered = 0;
+                        }
+                }
+        }
+
+        rcu_read_unlock();
+
+        return ret;
+}
+#endif
+
 static
 int brnf_sysctl_call_tables(struct ctl_table *ctl, int write,
 			    void __user *buffer, size_t *lenp, loff_t *ppos)
@@ -1039,6 +1084,15 @@ int brnf_sysctl_call_tables(struct ctl_table *ctl, int write,
 
 static struct ctl_table brnf_table[] = {
 	{
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+                .procname       = "bridge-nf-enabled",
+                .data           = &brnf_enabled,
+                .maxlen         = sizeof(int),
+                .mode           = 0644,
+                .proc_handler   = &brnf_sysctl_call_enabled,
+        },
+        {
+#endif
 		.procname	= "bridge-nf-call-arptables",
 		.data		= &brnf_call_arptables,
 		.maxlen		= sizeof(int),
@@ -1115,14 +1169,26 @@ int __init br_netfilter_init(void)
 	}
 #endif
 	printk(KERN_NOTICE "Bridge firewalling registered\n");
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+        nf_hooks_registered = 1;
+#endif
+
 	return 0;
 }
 
 void br_netfilter_fini(void)
 {
+
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+    if (nf_hooks_registered)
+#endif
 	nf_unregister_hooks(br_nf_ops, ARRAY_SIZE(br_nf_ops));
 #ifdef CONFIG_SYSCTL
 	unregister_net_sysctl_table(brnf_sysctl_header);
 #endif
+
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+        nf_hooks_registered = 0;
+#endif
 	dst_entries_destroy(&fake_dst_ops);
 }
diff --git a/net/bridge/br_private.h b/net/bridge/br_private.h
index d0ad421..ea40a7b 100644
--- a/net/bridge/br_private.h
+++ b/net/bridge/br_private.h
@@ -115,11 +115,15 @@ struct net_bridge_fdb_entry
 	struct net_bridge_port		*dst;
 
 	struct rcu_head			rcu;
+	atomic_t			use_count;
 	unsigned long			updated;
 	unsigned long			used;
 	mac_addr			addr;
 	unsigned char			is_local;
 	unsigned char			is_static;
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+        unsigned char			is_cascade;
+#endif
 	unsigned char			added_by_user;
 	__u16				vlan_id;
 };
@@ -229,6 +233,10 @@ struct net_bridge
 	struct pcpu_sw_netstats		__percpu *stats;
 	spinlock_t			hash_lock;
 	struct hlist_head		hash[BR_HASH_SIZE];
+#ifdef CONFIG_BR_HOOKS_n_CASCADE_BRIDGE_ENABLED
+        u16				cascaded_bridge;
+#endif
+
 #ifdef CONFIG_BRIDGE_NETFILTER
 	struct rtable 			fake_rtable;
 	bool				nf_call_iptables;
