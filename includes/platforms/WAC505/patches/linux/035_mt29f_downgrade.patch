diff --git a/drivers/staging/mt29f_spinand/giga_spinand.c b/drivers/staging/mt29f_spinand/giga_spinand.c
index f747a2b8..dc35bd66 100644
--- a/drivers/staging/mt29f_spinand/giga_spinand.c
+++ b/drivers/staging/mt29f_spinand/giga_spinand.c
@@ -37,21 +37,6 @@ void gigadevice_set_defaults(struct spi_device *spi_nand)
 	chip->ecc.layout = NULL;
 }
 
-void gigadevice_set_defaults_512mb(struct spi_device *spi_nand)
-{
-	struct mtd_info *mtd = (struct mtd_info *)dev_get_drvdata
-						(&spi_nand->dev);
-	struct nand_chip *chip = (struct nand_chip *)mtd->priv;
-
-	chip->ecc.size	= 0x1000;
-	chip->ecc.bytes	= 0x0;
-	chip->ecc.steps	= 0x0;
-
-	chip->ecc.strength = 1;
-	chip->ecc.total	= 0;
-	chip->ecc.layout = NULL;
-}
-
 void gigadevice_read_cmd(struct spinand_cmd *cmd, u32 page_id)
 {
 	cmd->addr[0] = (u8) (page_id >> 16);
@@ -60,20 +45,19 @@ void gigadevice_read_cmd(struct spinand_cmd *cmd, u32 page_id)
 
 }
 
-void gigadevice_read_data(struct spinand_cmd *cmd, u16 column, u32 page_id)
+void gigadevice_read_data(struct spinand_cmd *cmd, u16 column, u16 page_id)
 {
-	cmd->addr[0] = 0xff; /*dummy byte*/
 	cmd->addr[1] = (u8)(column >> 8);
 	cmd->addr[2] = (u8)(column);
 }
 
-void macronix_read_data(struct spinand_cmd *cmd, u16 column, u32 page_id)
+void macronix_read_data(struct spinand_cmd *cmd, u16 column, u16 page_id)
 {
 	cmd->addr[0] = ((u8)(column >> 8) & MACRONIX_NORM_RW_MASK);
 	cmd->addr[1] = (u8)(column);
 }
 
-void winbond_read_data(struct spinand_cmd *cmd, u16 column, u32 page_id)
+void winbond_read_data(struct spinand_cmd *cmd, u16 column, u16 page_id)
 {
 	cmd->addr[0] = (u8)(column >> 8);
 	cmd->addr[1] = (u8)(column);
@@ -86,19 +70,19 @@ void gigadevice_write_cmd(struct spinand_cmd *cmd, u32 page_id)
 	cmd->addr[2] = (u8)(page_id);
 }
 
-void gigadevice_write_data(struct spinand_cmd *cmd, u16 column, u32 page_id)
+void gigadevice_write_data(struct spinand_cmd *cmd, u16 column, u16 page_id)
 {
-	cmd->addr[0] = (u8)(column >> 8);
-	cmd->addr[1] = (u8)(column);
+	cmd->addr[1] = (u8)(column >> 8);
+	cmd->addr[2] = (u8)(column);
 }
 
-void macronix_write_data(struct spinand_cmd *cmd, u16 column, u32 page_id)
+void macronix_write_data(struct spinand_cmd *cmd, u16 column, u16 page_id)
 {
 	cmd->addr[0] = ((u8)(column >> 8) & MACRONIX_NORM_RW_MASK);
 	cmd->addr[1] = (u8)(column);
 }
 
-void winbond_write_data(struct spinand_cmd *cmd, u16 column, u32 page_id)
+void winbond_write_data(struct spinand_cmd *cmd, u16 column, u16 page_id)
 {
 	cmd->addr[0] = (u8)(column >> 8);
 	cmd->addr[1] = (u8)(column);
@@ -117,7 +101,7 @@ int gigadevice_verify_ecc(u8 status)
 
 	if (ecc_status == STATUS_ECC_ERROR_GIGA)
 		return SPINAND_ECC_ERROR;
-	else if (ecc_status >= STATUS_ECC_BF_THRESHOLD_GIGA)
+	else if (ecc_status)
 		return SPINAND_ECC_CORRECTED;
 	else
 		return 0;
@@ -141,23 +125,20 @@ int dummy_verify_ecc(u8 status)
 	return 0;
 }
 
-int gigadevice_parse_id(struct spi_device *spi_nand,
-		struct spinand_ops *ops, u8 *nand_id, u8 *id)
+int gigadevice_parse_id(struct spi_device *spi_nand, u8 *nand_id, u8 *id)
 {
 	if (nand_id[0] != NAND_MFR_GIGA && nand_id[0] != NAND_MFR_ATO)
 		return -EINVAL;
 
-	if (!(nand_id[0] == NAND_MFR_GIGA && nand_id[1] == ops->dev_id))
-		return -EINVAL;
-
-	id[0] = nand_id[0];
-	id[1] = nand_id[1];
+	if (nand_id[0] == NAND_MFR_GIGA) {
+		id[0] = nand_id[0];
+		id[1] = nand_id[1];
+	}
 
 	return 0;
 }
 
-int macronix_parse_id(struct spi_device *spi_nand,
-	struct spinand_ops *ops, u8 *nand_id, u8 *id)
+int macronix_parse_id(struct spi_device *spi_nand, u8 *nand_id, u8 *id)
 {
 	if (nand_id[1] != NAND_MFR_MACRONIX)
 		return -EINVAL;
@@ -165,10 +146,9 @@ int macronix_parse_id(struct spi_device *spi_nand,
 	return 0;
 }
 
-int winbond_parse_id(struct spi_device *spi_nand,
-	struct spinand_ops *ops, u8 *nand_id, u8 *id)
+int winbond_parse_id(struct spi_device *spi_nand, u8 *nand_id, u8 *id)
 {
-	if (!(nand_id[1] == NAND_MFR_WINBOND && nand_id[2] == ops->dev_id))
+	if (nand_id[1] != NAND_MFR_WINBOND)
 		return -EINVAL;
 
 	return 0;
diff --git a/drivers/staging/mt29f_spinand/giga_spinand.h b/drivers/staging/mt29f_spinand/giga_spinand.h
index 091fd4d1..52deb81c 100644
--- a/drivers/staging/mt29f_spinand/giga_spinand.h
+++ b/drivers/staging/mt29f_spinand/giga_spinand.h
@@ -21,43 +21,36 @@
 #include "mt29f_spinand.h"
 
 void gigadevice_set_defaults(struct spi_device *spi_nand);
-void gigadevice_set_defaults_512mb(struct spi_device *spi_nand);
 
 void gigadevice_read_cmd(struct spinand_cmd *cmd, u32 page_id);
 
-void gigadevice_read_data(struct spinand_cmd *cmd, u16 column, u32 page_id);
+void gigadevice_read_data(struct spinand_cmd *cmd, u16 column, u16 page_id);
 
 void gigadevice_write_cmd(struct spinand_cmd *cmd, u32 column);
 
-void gigadevice_write_data(struct spinand_cmd *cmd, u16 column, u32 page_id);
+void gigadevice_write_data(struct spinand_cmd *cmd, u16 column, u16 page_id);
 
 void gigadevice_erase_blk(struct spinand_cmd *cmd, u32 page_id);
 
-int gigadevice_parse_id(struct spi_device *spi_nand, struct spinand_ops *ops,
-							u8 *nand_id, u8 *id);
+int gigadevice_parse_id(struct spi_device *spi_nand, u8 *nand_id, u8 *id);
 
 int gigadevice_verify_ecc(u8 status);
 
 int dummy_verify_ecc(u8 status);
 
-void macronix_read_data(struct spinand_cmd *cmd, u16 column, u32 page_id);
+void macronix_read_data(struct spinand_cmd *cmd, u16 column, u16 page_id);
 
-void macronix_write_data(struct spinand_cmd *cmd, u16 column, u32 page_id);
+void macronix_write_data(struct spinand_cmd *cmd, u16 column, u16 page_id);
 
-int macronix_parse_id(struct spi_device *spi_nand, struct spinand_ops *ops,
-							u8 *nand_id, u8 *id);
+int macronix_parse_id(struct spi_device *spi_nand, u8 *nand_id, u8 *id);
 
 int macronix_verify_ecc(u8 status);
 
-void winbond_read_data(struct spinand_cmd *cmd, u16 column, u32 page_id);
+void winbond_read_data(struct spinand_cmd *cmd, u16 column, u16 page_id);
 
-void winbond_write_data(struct spinand_cmd *cmd, u16 column, u32 page_id);
+void winbond_write_data(struct spinand_cmd *cmd, u16 column, u16 page_id);
 
-int winbond_parse_id(struct spi_device *spi_nand, struct spinand_ops *ops,
-						u8 *nand_id, u8 *id);
-
-int winbond_die_select(struct spi_device *spi_nand,
-			struct spinand_ops *dev_ops, u8 die_id);
+int winbond_parse_id(struct spi_device *spi_nand, u8 *nand_id, u8 *id);
 
 /* Macronix Specfic defines */
 #define MACRONIX_NORM_RW_MASK	0x0F
diff --git a/drivers/staging/mt29f_spinand/mt29f_spinand.c b/drivers/staging/mt29f_spinand/mt29f_spinand.c
index f13d2009..54679f9f 100644
--- a/drivers/staging/mt29f_spinand/mt29f_spinand.c
+++ b/drivers/staging/mt29f_spinand/mt29f_spinand.c
@@ -24,20 +24,15 @@
 #include "mt29f_spinand.h"
 #include "giga_spinand.h"
 
-#define BUFSIZE (10 * 64 * 4096)
-#define CACHE_BUF 4352
+#define BUFSIZE (10 * 64 * 2048)
+#define CACHE_BUF 2112
 
-static int spinand_disable_ecc(struct spi_device *spi_nand);
-static int spinand_lock_block(struct spi_device *spi_nand, u8 lock);
 
 struct spinand_ops spinand_dev[] = {
 #ifdef CONFIG_MTD_SPINAND_GIGADEVICE
 	{
 		NAND_MFR_GIGA,
-		1,
 		0xb1,
-		INT_MAX,
-		0x10000,
 		gigadevice_set_defaults,
 		gigadevice_read_cmd,
 		gigadevice_read_data,
@@ -46,30 +41,10 @@ struct spinand_ops spinand_dev[] = {
 		gigadevice_erase_blk,
 		gigadevice_parse_id,
 		gigadevice_verify_ecc,
-		NULL,
 	},
 	{
 		NAND_MFR_GIGA,
-		1,
-		0xb4,
-		INT_MAX,
-		0x20000,
-		gigadevice_set_defaults_512mb,
-		gigadevice_read_cmd,
-		gigadevice_read_data,
-		gigadevice_write_cmd,
-		gigadevice_write_data,
-		gigadevice_erase_blk,
-		gigadevice_parse_id,
-		gigadevice_verify_ecc,
-		NULL,
-	},
-	{
-		NAND_MFR_GIGA,
-		1,
 		0xa1,
-		INT_MAX,
-		0x10000,
 		gigadevice_set_defaults,
 		gigadevice_read_cmd,
 		gigadevice_read_data,
@@ -78,14 +53,10 @@ struct spinand_ops spinand_dev[] = {
 		gigadevice_erase_blk,
 		gigadevice_parse_id,
 		gigadevice_verify_ecc,
-		NULL,
 	},
 	{
 		NAND_MFR_ATO,
-		1,
 		0x12,
-		INT_MAX,
-		0x10000,
 		gigadevice_set_defaults,
 		gigadevice_read_cmd,
 		gigadevice_read_data,
@@ -94,15 +65,11 @@ struct spinand_ops spinand_dev[] = {
 		gigadevice_erase_blk,
 		gigadevice_parse_id,
 		dummy_verify_ecc,
-		NULL,
 	},
 #endif
 	{
 		NAND_MFR_MACRONIX,
-		1,
 		0x12,
-		INT_MAX,
-		0x10000,
 		gigadevice_set_defaults,
 		gigadevice_read_cmd,
 		macronix_read_data,
@@ -111,14 +78,10 @@ struct spinand_ops spinand_dev[] = {
 		gigadevice_erase_blk,
 		macronix_parse_id,
 		macronix_verify_ecc,
-		NULL,
 	},
 	{
 		NAND_MFR_WINBOND,
-		1,
 		0xaa,
-		INT_MAX,
-		0x10000,
 		gigadevice_set_defaults,
 		gigadevice_read_cmd,
 		winbond_read_data,
@@ -127,23 +90,6 @@ struct spinand_ops spinand_dev[] = {
 		gigadevice_erase_blk,
 		winbond_parse_id,
 		macronix_verify_ecc,
-		NULL,
-	},
-	{
-		NAND_MFR_WINBOND,
-		2,
-		0xab,
-		INT_MAX,
-		0x10000,
-		gigadevice_set_defaults,
-		gigadevice_read_cmd,
-		winbond_read_data,
-		gigadevice_write_cmd,
-		winbond_write_data,
-		gigadevice_erase_blk,
-		winbond_parse_id,
-		macronix_verify_ecc,
-		winbond_die_select,
 	},
 	{ },
 };
@@ -155,7 +101,7 @@ void mt29f_read_page_to_cache(struct spinand_cmd *cmd, u32 page_id)
 
 }
 
-void mt29f_read_from_cache(struct spinand_cmd *cmd, u16 column, u32 page_id)
+void mt29f_read_from_cache(struct spinand_cmd *cmd, u16 column, u16 page_id)
 {
 	cmd->addr[0] = (u8)((column & 0xff00) >> 8);
 	cmd->addr[0] |= (u8)(((page_id >> 6) & 0x1) << 4);
@@ -164,7 +110,7 @@ void mt29f_read_from_cache(struct spinand_cmd *cmd, u16 column, u32 page_id)
 }
 
 void mt29f_program_data_to_cache(struct spinand_cmd *cmd, u16 column,
-							u32 page_id)
+							u16 page_id)
 {
 	cmd->addr[0] = (u8)((column & 0xff00) >> 8);
 	cmd->addr[0] |= (u8)(((page_id >> 6) & 0x1) << 4);
@@ -197,9 +143,6 @@ int mt29f_verify_ecc(u8 status)
 
 struct spinand_ops mt29f_spinand_ops = {
 		NAND_MFR_MICRON,
-		1,
-		0x0,
-		INT_MAX,
 		0x0,
 		NULL,
 		mt29f_read_page_to_cache,
@@ -209,7 +152,6 @@ struct spinand_ops mt29f_spinand_ops = {
 		mt29f_erase_block_erase,
 		NULL,
 		mt29f_verify_ecc,
-		NULL,
 };
 
 
@@ -235,12 +177,11 @@ void spinand_parse_id(struct spi_device *spi_nand, u8 *nand_id, u8 *id)
 
 	for (tmp = 0; tmp < ARRAY_SIZE(spinand_dev) - 1; tmp++) {
 		tmp_ops = &spinand_dev[tmp];
-			if (tmp_ops->spinand_parse_id(spi_nand,
-						tmp_ops, nand_id, id) == 0) {
-				info->dev_ops = &spinand_dev[tmp];
-				info->dev_ops->spinand_set_defaults(spi_nand);
-				return;
-			}
+		if (tmp_ops->spinand_parse_id(spi_nand, nand_id, id) == 0) {
+			info->dev_ops = &spinand_dev[tmp];
+			info->dev_ops->spinand_set_defaults(spi_nand);
+			return;
+		}
 	}
 	info->dev_ops = &mt29f_spinand_ops;
 	return;
@@ -331,57 +272,6 @@ static int spinand_cmd(struct spi_device *spi, struct spinand_cmd *cmd)
 	return spi_sync(spi, &message);
 }
 
-static int get_die_id(struct spinand_ops *dev_ops, u32 page_id)
-{
-	do_div(page_id, dev_ops->pages_per_die);
-	if (page_id > dev_ops->no_of_dies) {
-		pr_info("invalid die id : %d\n", page_id);
-		return -EINVAL;
-	}
-
-	return page_id;
-}
-
-/*
- * winbond_die_select - send command 0xc2 to select die
- * Description:
- *   Die select function.
- *   Die ID is given as either 0 or 1 to select die 0 or 1
- *   respectively
- */
-int winbond_die_select(struct spi_device *spi_nand,
-		struct spinand_ops *dev_ops, u8 die_id)
-{
-	int retval;
-	struct spinand_cmd cmd = {0};
-
-	if (die_id < 0)
-		return -1;
-
-	if (dev_ops->prev_die_id == die_id)
-		return 0;
-
-	cmd.cmd = CMD_DIE_SELECT,
-	cmd.n_addr = 1,
-	cmd.addr[0] = die_id,
-	retval = spinand_cmd(spi_nand, &cmd);
-	if (retval < 0)
-		dev_err(&spi_nand->dev, "error %d in die select\n", retval);
-	else
-		dev_ops->prev_die_id = die_id;
-
-	return retval;
-}
-
-static inline int select_die(struct spi_device *spi_nand,
-		struct spinand_ops *dev_ops, int die)
-{
-	if (dev_ops->spinand_die_select == NULL)
-		return 0;
-
-	return dev_ops->spinand_die_select(spi_nand,
-		dev_ops, die);
-}
 /*
  * spinand_read_id- Read SPI Nand ID
  * Description:
@@ -390,10 +280,8 @@ static inline int select_die(struct spi_device *spi_nand,
 static int spinand_read_id(struct spi_device *spi_nand, u8 *id)
 {
 	int retval;
-	int i;
 	u8 nand_id[3];
 	struct spinand_cmd cmd = {0};
-	struct spinand_ops *dev_ops;
 
 	cmd.cmd = CMD_READ_ID;
 	cmd.n_rx = 3;
@@ -407,19 +295,6 @@ static int spinand_read_id(struct spi_device *spi_nand, u8 *id)
 	id[0] = nand_id[1];
 	id[1] = nand_id[2];
 	spinand_parse_id(spi_nand, nand_id, id);
-	dev_ops = get_dev_ops(spi_nand);
-	if (dev_ops->spinand_die_select != NULL) {
-		for (i = 0; i < dev_ops->no_of_dies; i++) {
-			retval = dev_ops->spinand_die_select(spi_nand,
-						dev_ops, i);
-			if (retval < 0)
-				return retval;
-			spinand_lock_block(spi_nand, BL_ALL_UNLOCKED);
-			if (spinand_disable_ecc(spi_nand) < 0)
-				pr_info("%s: disable ecc failed!\n", __func__);
-		}
-	}
-
 	return retval;
 }
 
@@ -534,31 +409,21 @@ static int spinand_set_otp(struct spi_device *spi_nand, u8 *otp)
 static int spinand_enable_ecc(struct spi_device *spi_nand)
 {
 	int retval;
-	int i;
-	struct spinand_ops *dev_ops = get_dev_ops(spi_nand);
 	u8 otp = 0;
 
-	for (i = 0; i < dev_ops->no_of_dies; i++) {
-		retval = select_die(spi_nand, dev_ops, i);
-		if (retval < 0)
-			return retval;
+	retval = spinand_get_otp(spi_nand, &otp);
+	if (retval < 0)
+		return retval;
 
-		retval = spinand_get_otp(spi_nand, &otp);
+	if ((otp & OTP_ECC_MASK) == OTP_ECC_MASK) {
+		return 0;
+	} else {
+		otp |= OTP_ECC_MASK;
+		retval = spinand_set_otp(spi_nand, &otp);
 		if (retval < 0)
 			return retval;
-
-		if ((otp & OTP_ECC_MASK) != OTP_ECC_MASK) {
-			otp |= OTP_ECC_MASK;
-			retval = spinand_set_otp(spi_nand, &otp);
-			if (retval < 0)
-				return retval;
-			retval = spinand_get_otp(spi_nand, &otp);
-			if (retval < 0)
-				return retval;
-		}
+		return spinand_get_otp(spi_nand, &otp);
 	}
-
-	return 0;
 }
 #endif
 
@@ -582,47 +447,46 @@ static int spinand_disable_ecc(struct spi_device *spi_nand)
 }
 
 /**
- * spinand_write_config- send command 0x06 to enable write or erase the
- * Nand cells or send command 0x04 to disable write or erase the
+ * spinand_write_enable- send command 0x06 to enable write or erase the
  * Nand cells
- *
  * Description:
  *   Before write and erase the Nand cells, the write enable has to be set.
  *   After the write or erase, the write enable bit is automatically
  *   cleared (status register bit 2)
  *   Set the bit 2 of the status register has the same effect
- *   After write and erase the Nand cells, the write enable has to be disabled.
  */
-static int spinand_write_config(struct spi_device *spi_nand, u8 opcode)
+static int spinand_write_enable(struct spi_device *spi_nand)
 {
-	int ret = 0;
-	int i;
-	struct spinand_ops *dev_ops = get_dev_ops(spi_nand);
 	struct spinand_cmd cmd = {0};
 
-	for (i = 0; i < dev_ops->no_of_dies; i++) {
-		ret = select_die(spi_nand, dev_ops, i);
-		if (ret < 0)
-			return ret;
-		cmd.cmd = opcode;
-		ret = spinand_cmd(spi_nand, &cmd);
-		if (ret < 0)
-			return ret;
-	}
+	cmd.cmd = CMD_WR_ENABLE;
+	return spinand_cmd(spi_nand, &cmd);
+}
 
-	return ret;
+/**
+ * spinand_write_disable- send command 0x04 to disable write or erase the
+ * Nand cells
+ * Description:
+ *   After write and erase the Nand cells, the write enable has to be disabled.
+ */
+static int spinand_write_disable(struct spi_device *spi_nand)
+{
+	struct spinand_cmd cmd = {0};
+
+	cmd.cmd = CMD_WR_DISABLE;
+	return spinand_cmd(spi_nand, &cmd);
 }
 
-static int spinand_read_page_to_cache(struct spi_device *spi_nand, u32 page_id)
+static int spinand_read_page_to_cache(struct spi_device *spi_nand, u16 page_id)
 {
 	struct spinand_cmd cmd = {0};
+	u16 row;
 	struct spinand_ops *dev_ops = get_dev_ops(spi_nand);
 
-	select_die(spi_nand, dev_ops, get_die_id(dev_ops, page_id));
-
+	row = page_id;
 	cmd.cmd = CMD_READ;
 	cmd.n_addr = 3;
-	dev_ops->spinand_read_cmd(&cmd, page_id);
+	dev_ops->spinand_read_cmd(&cmd, row);
 
 	return spinand_cmd(spi_nand, &cmd);
 }
@@ -635,7 +499,7 @@ static int spinand_read_page_to_cache(struct spi_device *spi_nand, u32 page_id)
  *   locations.
  *   No tRd delay.
  */
-static int spinand_read_from_cache(struct spi_device *spi_nand, u32 page_id,
+static int spinand_read_from_cache(struct spi_device *spi_nand, u16 page_id,
 		u16 byte_id, u16 len, u8 *rbuf)
 {
 	struct spinand_cmd cmd = {0};
@@ -664,8 +528,8 @@ static int spinand_read_from_cache(struct spi_device *spi_nand, u32 page_id,
  *   The read includes two commands to the Nand: 0x13 and 0x03 commands
  *   Poll to read status to wait for tRD time.
  */
-static int spinand_read_page(struct spi_device *spi_nand, u32 page_id,
-		u32 offset, u32 len, u8 *rbuf)
+static int spinand_read_page(struct spi_device *spi_nand, u16 page_id,
+		u16 offset, u16 len, u8 *rbuf)
 {
 	int ret, ecc_error = 0, ecc_corrected = 0;
 	u8 status = 0;
@@ -745,20 +609,18 @@ static int spinand_read_page(struct spi_device *spi_nand, u32 page_id,
  *   Since it is writing the data to cache, there is no tPROG time.
  */
 static int spinand_program_data_to_cache(struct spi_device *spi_nand,
-		u32 page_id, u16 byte_id, u16 len, u8 *wbuf)
+		u16 page_id, u16 byte_id, u16 len, u8 *wbuf)
 {
 	struct spinand_cmd cmd = {0};
 	u16 column;
 	struct spinand_ops *dev_ops = get_dev_ops(spi_nand);
 
-	select_die(spi_nand, dev_ops, get_die_id(dev_ops, page_id));
-
 	column = byte_id;
 	cmd.cmd = CMD_PROG_PAGE_CLRCACHE;
 	cmd.n_addr = 2;
 	dev_ops->spinand_write_data(&cmd, column, page_id);
 	cmd.n_tx = len;
-	cmd.tx_buf = wbuf + column;
+	cmd.tx_buf = wbuf;
 
 	return spinand_cmd(spi_nand, &cmd);
 }
@@ -772,16 +634,16 @@ static int spinand_program_data_to_cache(struct spi_device *spi_nand,
  *   the Nand array.
  *   Need to wait for tPROG time to finish the transaction.
  */
-static int spinand_program_execute(struct spi_device *spi_nand, u32 page_id)
+static int spinand_program_execute(struct spi_device *spi_nand, u16 page_id)
 {
 	struct spinand_cmd cmd = {0};
+	u16 row;
 	struct spinand_ops *dev_ops = get_dev_ops(spi_nand);
 
-	select_die(spi_nand, dev_ops, get_die_id(dev_ops, page_id));
-
+	row = page_id;
 	cmd.cmd = CMD_PROG_PAGE_EXC;
 	cmd.n_addr = 3;
-	dev_ops->spinand_write_cmd(&cmd, page_id);
+	dev_ops->spinand_write_cmd(&cmd, row);
 
 	return spinand_cmd(spi_nand, &cmd);
 }
@@ -800,12 +662,13 @@ static int spinand_program_execute(struct spi_device *spi_nand, u32 page_id)
  *   Poll to wait for the tPROG time to finish the transaction.
  */
 static int spinand_program_page(struct spi_device *spi_nand,
-		u32 page_id, u16 offset, u16 len, u8 *buf)
+		u16 page_id, u16 offset, u16 len, u8 *buf)
 {
 	int retval = 0;
 	u8 status = 0;
 	uint8_t *wbuf;
 #ifdef CONFIG_MTD_SPINAND_ONDIEECC
+	unsigned int i, j;
 
 	enable_read_hw_ecc = 0;
 	wbuf = kzalloc(CACHE_BUF, GFP_KERNEL);
@@ -814,7 +677,8 @@ static int spinand_program_page(struct spi_device *spi_nand,
 
 	spinand_read_page(spi_nand, page_id, 0, CACHE_BUF, wbuf);
 
-	memcpy(wbuf + offset, buf, len);
+	for (i = offset, j = 0; i < len; i++, j++)
+		wbuf[i] &= buf[j];
 
 	if (enable_hw_ecc) {
 		retval = spinand_enable_ecc(spi_nand);
@@ -826,7 +690,7 @@ static int spinand_program_page(struct spi_device *spi_nand,
 #else
 	wbuf = buf;
 #endif
-	retval = spinand_write_config(spi_nand, CMD_WR_ENABLE);
+	retval = spinand_write_enable(spi_nand);
 	if (retval < 0) {
 		dev_err(&spi_nand->dev, "write enable failed!!\n");
 		goto exit;
@@ -872,7 +736,7 @@ static int spinand_program_page(struct spi_device *spi_nand,
 		enable_hw_ecc = 0;
 	}
 #endif
-	retval = spinand_write_config(spi_nand, CMD_WR_DISABLE);
+	retval = spinand_write_disable(spi_nand);
 	if (retval < 0) {
 		dev_err(&spi_nand->dev, "write disable failed!!\n");
 		goto exit;
@@ -896,16 +760,16 @@ exit:
  *   one block--64 pages
  *   Need to wait for tERS.
  */
-static int spinand_erase_block_erase(struct spi_device *spi_nand, u32 block_id)
+static int spinand_erase_block_erase(struct spi_device *spi_nand, u16 block_id)
 {
 	struct spinand_cmd cmd = {0};
+	u16 row;
 	struct spinand_ops *dev_ops = get_dev_ops(spi_nand);
 
-	select_die(spi_nand, dev_ops, get_die_id(dev_ops, block_id));
-
+	row = block_id;
 	cmd.cmd = CMD_ERASE_BLK;
 	cmd.n_addr = 3;
-	dev_ops->spinand_erase_blk(&cmd, block_id);
+	dev_ops->spinand_erase_blk(&cmd, row);
 
 	return spinand_cmd(spi_nand, &cmd);
 }
@@ -921,12 +785,12 @@ static int spinand_erase_block_erase(struct spi_device *spi_nand, u32 block_id)
  *   and then send the 0xd8 erase command
  *   Poll to wait for the tERS time to complete the tranaction.
  */
-static int spinand_erase_block(struct spi_device *spi_nand, u32 block_id)
+static int spinand_erase_block(struct spi_device *spi_nand, u16 block_id)
 {
 	int retval;
 	u8 status = 0;
 
-	retval = spinand_write_config(spi_nand, CMD_WR_ENABLE);
+	retval = spinand_write_enable(spi_nand);
 	if (retval < 0) {
 		dev_err(&spi_nand->dev, "write enable failed!!\n");
 		return retval;
@@ -953,7 +817,7 @@ static int spinand_erase_block(struct spi_device *spi_nand, u32 block_id)
 				break;
 		}
 	}
-	retval = spinand_write_config(spi_nand, CMD_WR_DISABLE);
+	retval = spinand_write_disable(spi_nand);
 	if (retval < 0) {
 		dev_err(&spi_nand->dev, "write disable failed!!\n");
 		return retval;
@@ -979,18 +843,14 @@ static int spinand_write_page_hwecc(struct mtd_info *mtd,
 static int spinand_read_page_hwecc(struct mtd_info *mtd, struct nand_chip *chip,
 		uint8_t *buf, int oob_required, int page)
 {
-	int retval;
-	u8 status = 0;
+	u8 retval, status = 0;
 	uint8_t *p = buf;
 	int eccsize = chip->ecc.size;
 	int eccsteps = chip->ecc.steps;
 	struct spinand_info *info = (struct spinand_info *)chip->priv;
 	struct spinand_ops *dev_ops = info->dev_ops;
-	struct spinand_state *state = (struct spinand_state *)info->priv;
 
 	enable_read_hw_ecc = 1;
-	spinand_read_page(info->spi, page, state->col,
-		(mtd->writesize + mtd->oobsize), state->buf);
 
 	chip->read_buf(mtd, p, eccsize * eccsteps);
 	if (oob_required)
@@ -998,20 +858,15 @@ static int spinand_read_page_hwecc(struct mtd_info *mtd, struct nand_chip *chip,
 
 	while (1) {
 		retval = spinand_read_status(info->spi, &status);
-		if (retval < 0) {
-			dev_err(&mtd->dev,
-				"error %d reading status register\n", retval);
-			return retval;
-		}
 		if ((status & STATUS_OIP_MASK) == STATUS_READY) {
 			retval = dev_ops->spinand_verify_ecc(status);
 			if (retval == SPINAND_ECC_ERROR) {
 				pr_info("spinand: ECC error\n");
 				mtd->ecc_stats.failed++;
-				return 0;
+				retval = -EBADMSG;
 			} else if (retval == SPINAND_ECC_CORRECTED) {
 				mtd->ecc_stats.corrected++;
-				return 1; /*Bitflips Corrected*/
+				retval = -EUCLEAN;
 			}
 			break;
 		}
@@ -1019,20 +874,6 @@ static int spinand_read_page_hwecc(struct mtd_info *mtd, struct nand_chip *chip,
 	return retval;
 
 }
-
-static int spinand_read_page_raw(struct mtd_info *mtd, struct nand_chip *chip,
-			      uint8_t *buf, int oob_required, int page)
-{
-	struct spinand_info *info = (struct spinand_info *)chip->priv;
-	struct spinand_state *state = (struct spinand_state *)info->priv;
-
-	spinand_read_page(info->spi, page, state->col,
-		(mtd->writesize + mtd->oobsize), state->buf);
-	chip->read_buf(mtd, buf, mtd->writesize);
-	if (oob_required)
-		chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
-	return 0;
-}
 #endif
 
 static void spinand_select_chip(struct mtd_info *mtd, int dev)
@@ -1120,9 +961,9 @@ static void spinand_cmdfunc(struct mtd_info *mtd, unsigned int command,
 	 */
 	case NAND_CMD_READ1:
 	case NAND_CMD_READ0:
-		state->col = column;
-		state->row = page;
 		state->buf_ptr = 0;
+		spinand_read_page(info->spi, page, 0x0,
+			(mtd->writesize + mtd->oobsize), state->buf);
 		break;
 	/* READOOB reads only the OOB because no ECC is performed. */
 	case NAND_CMD_READOOB:
@@ -1254,7 +1095,6 @@ static int spinand_probe(struct spi_device *spi_nand)
 	chip->ecc.total	= chip->ecc.steps * chip->ecc.bytes;
 	chip->ecc.layout = &spinand_oob_64;
 	chip->ecc.read_page = spinand_read_page_hwecc;
-	chip->ecc.read_page_raw = spinand_read_page_raw;
 	chip->ecc.write_page = spinand_write_page_hwecc;
 #else
 	chip->ecc.mode	= NAND_ECC_SOFT;
diff --git a/drivers/staging/mt29f_spinand/mt29f_spinand.h b/drivers/staging/mt29f_spinand/mt29f_spinand.h
index bfd6a802..516f3546 100644
--- a/drivers/staging/mt29f_spinand/mt29f_spinand.h
+++ b/drivers/staging/mt29f_spinand/mt29f_spinand.h
@@ -36,7 +36,6 @@
 #define CMD_RESET			0xff
 #define CMD_READ_REG			0x0f
 #define CMD_WRITE_REG			0x1f
-#define CMD_DIE_SELECT			0xC2
 
 /* feature/ status reg */
 #define REG_BLOCK_LOCK			0xa0
@@ -61,7 +60,6 @@
 
 #define STATUS_ECC_MASK_GIGA		0x70
 #define STATUS_ECC_ERROR_GIGA		0x70
-#define STATUS_ECC_BF_THRESHOLD_GIGA	0x40
 #define STATUS_ECC_MASK_MACRONIX	0x30
 #define STATUS_ECC_ERROR_MACRONIX	0x20
 #define SPINAND_ECC_ERROR		0x1
@@ -99,23 +97,18 @@ struct spinand_cmd {
 
 struct spinand_ops {
 	u8   maf_id;
-	u8   no_of_dies;
 	u16   dev_id;
-	int   prev_die_id;
-	u64   pages_per_die;
 	void (*spinand_set_defaults)(struct spi_device *spi_nand);
 	void (*spinand_read_cmd)(struct spinand_cmd *cmd, u32 page_id);
 	void (*spinand_read_data)(struct spinand_cmd *cmd, u16 column,
-							u32 page_id);
+							u16 page_id);
 	void (*spinand_write_cmd)(struct spinand_cmd *cmd, u32 page_id);
 	void (*spinand_write_data)(struct spinand_cmd *cmd, u16 column,
-							u32 page_id);
+							u16 page_id);
 	void (*spinand_erase_blk)(struct spinand_cmd *cmd, u32 page_id);
-	int (*spinand_parse_id)(struct spi_device *spi_nand,
-			struct spinand_ops *ops, u8 *nand_id, u8 *id);
+	int (*spinand_parse_id)(struct spi_device *spi_nand, u8 *nand_id,
+								u8 *id);
 	int (*spinand_verify_ecc)(u8 status);
-	int (*spinand_die_select)(struct spi_device *spi_nand,
-			struct spinand_ops *dev_ops, u8 die_id);
 };
 
 struct spinand_info {
