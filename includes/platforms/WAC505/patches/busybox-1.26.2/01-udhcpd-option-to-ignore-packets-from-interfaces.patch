diff --git a/include/libbb.h b/include/libbb.h
index abdc8c2..aa71f7e 100644
--- a/include/libbb.h
+++ b/include/libbb.h
@@ -694,6 +694,7 @@ struct hostent *xgethostbyname(const char *name) FAST_FUNC;
 
 
 void socket_want_pktinfo(int fd) FAST_FUNC;
+void socket_want_recvifindex(int fd) FAST_FUNC;
 ssize_t send_to_from(int fd, void *buf, size_t len, int flags,
 		const struct sockaddr *to,
 		const struct sockaddr *from,
@@ -702,6 +703,8 @@ ssize_t recv_from_to(int fd, void *buf, size_t len, int flags,
 		struct sockaddr *from,
 		struct sockaddr *to,
 		socklen_t sa_size) FAST_FUNC;
+ssize_t
+recv_ifindex(int fd, void *buf, size_t len, int flags, int *ifindex) FAST_FUNC;
 
 uint16_t inet_cksum(uint16_t *addr, int len) FAST_FUNC;
 
diff --git a/libbb/udp_io.c b/libbb/udp_io.c
index 6e3ef48..2a3c860 100644
--- a/libbb/udp_io.c
+++ b/libbb/udp_io.c
@@ -7,7 +7,7 @@
  * Licensed under GPLv2, see file LICENSE in this source tree.
  */
 #include "libbb.h"
-
+#define IP_RECVIFINDEX 51
 /*
  * This asks kernel to let us know dst addr/port of incoming packets
  * We don't check for errors here. Not supported == won't be used
@@ -23,6 +23,19 @@ socket_want_pktinfo(int fd UNUSED_PARAM)
 #endif
 }
 
+void FAST_FUNC
+socket_want_recvifindex(int fd UNUSED_PARAM)
+{
+#ifdef IP_RECVIFINDEX
+	setsockopt_1(fd, IPPROTO_IP, IP_RECVIFINDEX);
+#else
+	#error "IP_RECVIFINDEX not defined"
+#endif
+#if ENABLE_FEATURE_IPV6 && defined(IPV6_PKTINFO)
+	setsockopt_1(fd, IPPROTO_IPV6, IPV6_PKTINFO);
+#endif
+}
+
 
 ssize_t FAST_FUNC
 send_to_from(int fd, void *buf, size_t len, int flags,
@@ -183,3 +196,47 @@ recv_from_to(int fd, void *buf, size_t len, int flags,
 	return recv_length;
 #endif
 }
+ssize_t FAST_FUNC
+recv_ifindex(int fd, void *buf, size_t len, int flags, int *ifindex)
+{
+#ifndef IP_RECVIFINDEX
+	return recv(fd, buf, len, flags);
+#else
+	/* man recvmsg and man cmsg is needed to make sense of code below */
+	struct iovec iov[1];
+	union {
+		char cmsg[CMSG_SPACE(sizeof(int))];
+	} u;
+	struct cmsghdr *cmsgptr;
+	struct msghdr msg;
+	ssize_t recv_length;
+
+	iov[0].iov_base = buf;
+	iov[0].iov_len = len;
+
+	memset(&msg, 0, sizeof(msg));
+	msg.msg_name = NULL;
+	msg.msg_namelen = 0;
+	msg.msg_iov = iov;
+	msg.msg_iovlen = 1;
+	msg.msg_control = &u;
+	msg.msg_controllen = sizeof(u);
+
+	recv_length = recvmsg(fd, &msg, flags);
+	if (recv_length < 0)
+		return recv_length;
+
+	for (cmsgptr = CMSG_FIRSTHDR(&msg);
+			cmsgptr != NULL;
+			cmsgptr = CMSG_NXTHDR(&msg, cmsgptr)
+	) {
+		if (cmsgptr->cmsg_level == IPPROTO_IP
+		 && cmsgptr->cmsg_type == IP_RECVIFINDEX
+		) {
+			*ifindex = *(int*)(CMSG_DATA(cmsgptr));
+			break;
+		}
+	}
+	return recv_length;
+#endif
+}
diff --git a/networking/udhcp/common.h b/networking/udhcp/common.h
index a526494..4cd55ac 100644
--- a/networking/udhcp/common.h
+++ b/networking/udhcp/common.h
@@ -289,6 +289,7 @@ int FAST_FUNC udhcp_str2optset(const char *str, void *arg);
 void udhcp_init_header(struct dhcp_packet *packet, char type) FAST_FUNC;
 
 int udhcp_recv_kernel_packet(struct dhcp_packet *packet, int fd) FAST_FUNC;
+int udhcp_recv_kernel_packet_ifindex(struct dhcp_packet *packet, int fd, int *ifindex) FAST_FUNC;
 
 int udhcp_send_raw_packet(struct dhcp_packet *dhcp_pkt,
 		uint32_t source_nip, int source_port,
diff --git a/networking/udhcp/dhcpd.c b/networking/udhcp/dhcpd.c
index e116ba3..7e3ca55 100644
--- a/networking/udhcp/dhcpd.c
+++ b/networking/udhcp/dhcpd.c
@@ -39,6 +39,7 @@
 //usage:	)
 
 #include <netinet/ether.h>
+#include "libbb.h"
 #include <syslog.h>
 #include "common.h"
 #include "dhcpc.h"
@@ -329,6 +330,29 @@ static int FAST_FUNC read_str(const char *line, void *arg)
 	return 1;
 }
 
+static int FAST_FUNC read_ignore_if(const char *line, void *arg)
+{
+       char **dest = arg;
+       int i;
+
+       if (line == NULL) {
+               for ( i = 0; i < ARRAY_SIZE(server_config.ignore_interfaces); i++) {
+                       free(dest[i]);
+                       dest[i] = NULL;
+               }
+               return 1;
+       }
+       for (i = 0; i < ARRAY_SIZE(server_config.ignore_interfaces); i++) {
+               if (dest[i] == NULL) {
+                       dest[i] = xstrdup(line);
+                       return 1;
+               }
+       }
+
+       bb_error_msg("Maximum %d interfaces can be ignored.\n", ARRAY_SIZE(server_config.ignore_interfaces));
+       return 1;
+}
+
 static int FAST_FUNC read_u32(const char *line, void *arg)
 {
 	*(uint32_t*)arg = bb_strtou32(line, NULL, 10);
@@ -393,6 +417,7 @@ static const struct config_keyword keywords[] = {
 	{"sname"        , read_str        , OFS(sname        ), NULL},
 	{"boot_file"    , read_str        , OFS(boot_file    ), NULL},
 	{"static_lease" , read_staticlease, OFS(static_leases), ""},
+        {"ignore_interface", read_ignore_if, &server_config.ignore_interfaces    , NULL},
 };
 enum { KWS_WITH_DEFAULTS = ARRAY_SIZE(keywords) - 6 };
 
@@ -794,7 +819,7 @@ static NOINLINE void send_inform(struct dhcp_packet *oldpacket)
 int udhcpd_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int udhcpd_main(int argc UNUSED_PARAM, char **argv)
 {
-	int server_socket = -1, retval, max_sock;
+	int server_socket = -1, retval, max_sock, i;
 	uint8_t *state;
 	unsigned timeout_end;
 	unsigned num_ips;
@@ -885,6 +910,16 @@ int udhcpd_main(int argc UNUSED_PARAM, char **argv)
 		goto ret;
 	}
 
+	for(i = 0; i < ARRAY_SIZE(server_config.ignore_interfaces); i++) {
+		if(server_config.ignore_interfaces[i] == NULL) break;
+		if (udhcp_read_interface(server_config.ignore_interfaces[i],
+			&server_config.ignore_ifindex[i], NULL, NULL)
+		) {
+			retval = 1;
+			goto ret;
+		}
+	}
+
 	/* Setup the signal pipe */
 	udhcp_sp_setup();
 
@@ -893,7 +928,7 @@ int udhcpd_main(int argc UNUSED_PARAM, char **argv)
 	while (1) { /* loop until universe collapses */
 		fd_set rfds;
 		struct dhcp_packet packet;
-		int bytes;
+		int bytes, ifindex;
 		struct timeval tv;
 		uint8_t *server_id_opt;
 		uint8_t *requested_ip_opt;
@@ -904,6 +939,7 @@ int udhcpd_main(int argc UNUSED_PARAM, char **argv)
 		if (server_socket < 0) {
 			server_socket = udhcp_listen_socket(/*INADDR_ANY,*/ SERVER_PORT,
 					server_config.interface);
+			socket_want_recvifindex(server_socket);
 		}
 
 		max_sock = udhcp_sp_fd_set(&rfds, server_socket);
@@ -942,7 +978,8 @@ int udhcpd_main(int argc UNUSED_PARAM, char **argv)
 			continue;
 		}
 
-		bytes = udhcp_recv_kernel_packet(&packet, server_socket);
+		ifindex = 0;
+		bytes = udhcp_recv_kernel_packet_ifindex(&packet, server_socket, &ifindex);
 		if (bytes < 0) {
 			/* bytes can also be -2 ("bad packet data") */
 			if (bytes == -1 && errno != EINTR) {
@@ -960,6 +997,17 @@ int udhcpd_main(int argc UNUSED_PARAM, char **argv)
 			bb_error_msg("not a REQUEST, ignoring packet");
 			continue;
 		}
+		if(ifindex && server_config.ignore_ifindex[0]) {
+			int ignore = 0;
+			for(i = 0; i < ARRAY_SIZE(server_config.ignore_interfaces) && server_config.ignore_ifindex[i]; i++) {
+				if ( ifindex == server_config.ignore_ifindex[i] ) {
+					log2("ignore dhcp packet rx on %s\n", server_config.ignore_interfaces[i]);
+					ignore = 1;
+					break;
+				}
+			}
+			if(ignore) continue;
+		}
 		state = udhcp_get_option(&packet, DHCP_MESSAGE_TYPE);
 		if (state == NULL || state[0] < DHCP_MINTYPE || state[0] > DHCP_MAXTYPE) {
 			bb_error_msg("no or bad message type option, ignoring packet");
diff --git a/networking/udhcp/dhcpd.h b/networking/udhcp/dhcpd.h
index b8f96b0..24306e6 100644
--- a/networking/udhcp/dhcpd.h
+++ b/networking/udhcp/dhcpd.h
@@ -30,6 +30,8 @@ struct server_config_t {
 // update_server_network_data_cache() must re-query data
 // if more than N seconds have passed after last use.
 	int ifindex;
+	char *ignore_interfaces[5];
+	int ignore_ifindex[5];
 	uint32_t server_nip;
 #if ENABLE_FEATURE_UDHCP_PORT
 	uint16_t port;
diff --git a/networking/udhcp/packet.c b/networking/udhcp/packet.c
index 0a31f26..fc4db25 100644
--- a/networking/udhcp/packet.c
+++ b/networking/udhcp/packet.c
@@ -101,6 +101,29 @@ int FAST_FUNC udhcp_recv_kernel_packet(struct dhcp_packet *packet, int fd)
 	return bytes;
 }
 
+/* Read a packet from socket fd, return -1 on read error, -2 on packet error */
+int FAST_FUNC udhcp_recv_kernel_packet_ifindex(struct dhcp_packet *packet, int fd, int *ifindex)
+{
+	int bytes;
+
+	memset(packet, 0, sizeof(*packet));
+	bytes = recv_ifindex(fd, packet, sizeof(*packet), 0, ifindex);
+	if (bytes < 0) {
+		log1("Packet read error, ignoring");
+		return bytes; /* returns -1 */
+	}
+
+	if (bytes < offsetof(struct dhcp_packet, options)
+	 || packet->cookie != htonl(DHCP_MAGIC)
+	) {
+		bb_error_msg("Packet with bad magic, ignoring");
+		return -2;
+	}
+	udhcp_dump_packet(packet);
+
+	return bytes;
+}
+
 /* Construct a ip/udp header for a packet, send packet */
 int FAST_FUNC udhcp_send_raw_packet(struct dhcp_packet *dhcp_pkt,
 		uint32_t source_nip, int source_port,
diff -ur busybox-1.26.2/networking/udhcp/dhcpd.c busybox-1.26.2_changed/networking/udhcp/dhcpd.c
--- busybox-1.26.2/networking/udhcp/dhcpd.c
+++ busybox-1.26.2_changed/networking/udhcp/dhcpd.c
@@ -417,7 +417,7 @@
 	{"sname"        , read_str        , OFS(sname        ), NULL},
 	{"boot_file"    , read_str        , OFS(boot_file    ), NULL},
 	{"static_lease" , read_staticlease, OFS(static_leases), ""},
-        {"ignore_interface", read_ignore_if, &server_config.ignore_interfaces    , NULL},
+    {"ignore_interface", read_ignore_if, OFS(ignore_interfaces), NULL},
 };
 enum { KWS_WITH_DEFAULTS = ARRAY_SIZE(keywords) - 6 };
 
