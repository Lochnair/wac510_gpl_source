--- busybox-1.26.2/sysklogd/syslogd.c	2014-01-09 23:45:44.000000000 +0530
+++ busybox-1.26.2/sysklogd/syslogd.c	2016-06-28 12:21:05.039754741 +0530
@@ -192,6 +192,28 @@
 	DNS_WAIT_SEC = 2 * 60,
 };
 
+/**************************filter******************************/
+#define NUM_APPS 5
+#define APP_LEN 15
+
+typedef struct list {
+	char app[APP_LEN];
+	unsigned int pri;
+	struct list *next;
+}NODE;
+
+NODE *head_g;
+
+static void init_database(void);
+static void *delete_all(NODE *);
+static int save(NODE *);
+static NODE *read_database(void);
+
+/*************************************/
+
+
+/**************************************************************/
+
 /* Semaphore operation structures */
 struct shbuf_ds {
 	int32_t size;   /* size of data - 1 */
@@ -880,6 +916,69 @@
 	timestamp_and_log(LOG_SYSLOG | LOG_INFO, (char*)msg, 0);
 }
 
+#if ENABLE_FEATURE_REMOTE_LOG
+static int try_to_resolve_remote(remoteHost_t *rh)
+{
+	if (!rh->remoteAddr) {
+		unsigned now = monotonic_sec();
+
+		/* Don't resolve name too often - DNS timeouts can be big */
+		if ((now - rh->last_dns_resolve) < DNS_WAIT_SEC)
+			return -1;
+		rh->last_dns_resolve = now;
+		rh->remoteAddr = host2sockaddr(rh->remoteHostname, 514);
+		if (!rh->remoteAddr)
+			return -1;
+	}
+	return xsocket(rh->remoteAddr->u.sa.sa_family, SOCK_DGRAM, 0);
+}
+#endif
+/********************************filter*****************************/
+
+#if ENABLE_FEATURE_REMOTE_LOG
+static void log_remotely(char *recvbuf, int sz)
+{
+	llist_t *item;
+		/* Stock syslogd sends it '\n'-terminated
+		 * over network, mimic that */
+	//	recvbuf[sz] = '\n';
+    int len  = strlen(recvbuf);
+    recvbuf[len] = '\n';
+
+
+		/* We are not modifying log messages in any way before send */
+		/* Remote site cannot trust _us_ anyway and need to do validation again */
+		for (item = G.remoteHosts; item != NULL; item = item->link) {
+			remoteHost_t *rh = (remoteHost_t *)item->data;
+
+			if (rh->remoteFD == -1) {
+				rh->remoteFD = try_to_resolve_remote(rh);
+				if (rh->remoteFD == -1)
+					continue;
+			}
+
+			/* Send message to remote logger.
+			 * On some errors, close and set remoteFD to -1
+			 * so that DNS resolution is retried.
+			 */
+			if (sendto(rh->remoteFD, recvbuf, len+1,
+					MSG_DONTWAIT | MSG_NOSIGNAL,
+					&(rh->remoteAddr->u.sa), rh->remoteAddr->len) == -1
+			) {
+				switch (errno) {
+				case ECONNRESET:
+				case ENOTCONN: /* paranoia */
+				case EPIPE:
+					close(rh->remoteFD);
+					rh->remoteFD = -1;
+					free(rh->remoteAddr);
+					rh->remoteAddr = NULL;
+				}
+			}
+		}
+}
+#endif
+
 /* tmpbuf[len] is a NUL byte (set by caller), but there can be other,
  * embedded NULs. Split messages on each of these NULs, parse prio,
  * escape control chars and log each locally. */
@@ -914,8 +1013,46 @@
 		*q = '\0';
 
 		/* Now log it */
-		timestamp_and_log(pri, G.parsebuf, q - G.parsebuf);
-	}
+        /********************filter the log message***********/
+        char res[20];
+		unsigned int tmp_pri = 7; /*info level*/
+		NODE *tmp = head_g;
+
+        tmp_pri = (LOG_PRI(pri) + 1);
+        char *app_name;
+        char *tmp_msg = (char *)calloc(1, sizeof(G.parsebuf));
+        strcpy(tmp_msg, G.parsebuf+16);
+		app_name = strtok(tmp_msg,":");
+		free(tmp_msg);
+
+		while (tmp) {
+			if ((strstr(app_name, tmp->app))) {
+				if ((tmp_pri <= tmp->pri)) {
+#if ENABLE_FEATURE_REMOTE_LOG
+					tmp_msg = (char *)calloc(1, sizeof(G.parsebuf));
+					strcpy(tmp_msg, G.parsebuf);
+					log_remotely(tmp_msg, len);
+#endif
+					timestamp_and_log(pri, tmp_msg, len);
+					free(tmp_msg);
+					return;
+				}
+				return;
+			} else {
+				tmp = tmp->next;
+			}
+		}
+		if (tmp_pri <= (G.logLevel-1)) {
+#if ENABLE_FEATURE_REMOTE_LOG
+			char *tmp_msg = (char *)calloc(1, sizeof(G.parsebuf));
+			strcpy(tmp_msg, G.parsebuf);
+			log_remotely(G.parsebuf,len);
+#endif
+			timestamp_and_log(pri, tmp_msg, len);
+			free(tmp_msg);
+		}
+        /*****************************************************/
+    }
 }
 
 #ifdef SYSLOGD_MARK
@@ -955,31 +1092,107 @@
 
 	return sock_fd;
 }
+void SIG_RDB(int n)
+{
+    head_g = NULL;
+    head_g = read_database();
+}
 
-#if ENABLE_FEATURE_REMOTE_LOG
-static int try_to_resolve_remote(remoteHost_t *rh)
+static void init_database(void)
 {
-	if (!rh->remoteAddr) {
-		unsigned now = monotonic_sec();
+    NODE *head = NULL;
+    char *app[NUM_APPS] = {"kernel","nddmp","hostapd","configd","cloudAgent"};
+    int i;
+    NODE *nu = NULL;
+    for (i = 0; i < NUM_APPS; i++) {
+        nu = (NODE *)calloc(1,sizeof(NODE));
+        if (nu == NULL) {
+			perror("Mem Alloc Init database failed !!!\n");
+			return;
+		}
+		strcpy(nu->app, app[i]);
+        nu->pri = 7;
+        if (head == NULL) {
+            head = nu;
+        } else {
+            nu->next = head;
+            head = nu;
+        }
+    }
+    if (save(head) != EXIT_SUCCESS) {
+        printf("ERROR : Data cannot be saved");
+    }
+    head = delete_all(head);
+}
 
-		/* Don't resolve name too often - DNS timeouts can be big */
-		if ((now - rh->last_dns_resolve) < DNS_WAIT_SEC)
-			return -1;
-		rh->last_dns_resolve = now;
-		rh->remoteAddr = host2sockaddr(rh->remoteHostname, 514);
-		if (!rh->remoteAddr)
-			return -1;
-	}
-	return xsocket(rh->remoteAddr->u.sa.sa_family, SOCK_DGRAM, 0);
+static void *delete_all(NODE *head)
+{
+    NODE *temp;
+    temp = head;
+    while(head) {
+        head = head->next;
+        free(temp);
+        temp = head;
+    }
+    return NULL;
 }
-#endif
+
+static int save(NODE *head)
+{
+    FILE *fp = NULL;
+    fp = fopen("/var/syslog.database","wb");
+    if(fp == NULL) {
+        perror("Data cannot be saved");
+        return EXIT_FAILURE;
+    }
+    while(head)
+    {
+        fwrite(head,sizeof(NODE)-sizeof(NODE*),1,fp);
+        head = head->next;
+    }
+    fclose(fp);
+    return EXIT_SUCCESS;
+}
+
+static NODE *read_database(void)
+{
+    NODE *head = NULL,*nu = NULL,*var = NULL;
+    FILE *fp = fopen("/var/syslog.database","rb");
+    if (fp == NULL) {
+        init_database();
+    }
+
+    var = (NODE *)calloc(1,sizeof(NODE));
+    if(var == NULL) {
+        perror("Mem Alloc failed, read database!!!\n");
+        return EXIT_FAILURE;
+    }
+    while (fread(var,sizeof(NODE)-sizeof(NODE*),1,fp)==1) {
+        nu = (NODE *)calloc(1,sizeof(NODE));
+		if(nu == NULL) {
+			perror("Mem Alloc failed, read database!!!\n");
+			return EXIT_FAILURE;
+		}
+		memcpy(nu,var,sizeof(NODE)-sizeof(NODE*));
+        if (head == NULL) {
+            head=nu;
+        } else {
+            nu->next = head;
+            head = nu;
+        }
+    }
+    fclose(fp);
+    free(var);
+    return head;
+}
+
+/*******************************************************************/
+
+
 
 static void do_syslogd(void) NORETURN;
 static void do_syslogd(void)
 {
-#if ENABLE_FEATURE_REMOTE_LOG
-	llist_t *item;
-#endif
 #if ENABLE_FEATURE_SYSLOGD_DUP
 	int last_sz = -1;
 	char *last_buf;
@@ -992,7 +1205,7 @@
 	signal_no_SA_RESTART_empty_mask(SIGTERM, record_signo);
 	signal_no_SA_RESTART_empty_mask(SIGINT, record_signo);
 	//signal_no_SA_RESTART_empty_mask(SIGQUIT, record_signo);
-	signal(SIGHUP, SIG_IGN);
+	signal(SIGHUP, SIG_RDB);
 #ifdef SYSLOGD_MARK
 	signal(SIGALRM, do_mark);
 	alarm(G.markInterval);
@@ -1011,102 +1224,74 @@
 		ssize_t sz;
 
 #if ENABLE_FEATURE_SYSLOGD_DUP
-		last_buf = recvbuf;
-		if (recvbuf == G.recvbuf)
-			recvbuf = G.recvbuf + MAX_READ;
-		else
-			recvbuf = G.recvbuf;
-#endif
- read_again:
-		sz = read(STDIN_FILENO, recvbuf, MAX_READ - 1);
-		if (sz < 0) {
-			if (!bb_got_signal)
-				bb_perror_msg("read from %s", _PATH_LOG);
-			break;
-		}
-
-		/* Drop trailing '\n' and NULs (typically there is one NUL) */
-		while (1) {
-			if (sz == 0)
-				goto read_again;
-			/* man 3 syslog says: "A trailing newline is added when needed".
-			 * However, neither glibc nor uclibc do this:
-			 * syslog(prio, "test")   sends "test\0" to /dev/log,
-			 * syslog(prio, "test\n") sends "test\n\0".
-			 * IOW: newline is passed verbatim!
-			 * I take it to mean that it's syslogd's job
-			 * to make those look identical in the log files. */
-			if (recvbuf[sz-1] != '\0' && recvbuf[sz-1] != '\n')
-				break;
-			sz--;
-		}
+        last_buf = recvbuf;
+        if (recvbuf == G.recvbuf)
+            recvbuf = G.recvbuf + MAX_READ;
+        else
+            recvbuf = G.recvbuf;
+#endif
+read_again:
+        sz = read(STDIN_FILENO, recvbuf, MAX_READ - 1);
+        if (sz < 0) {
+            if (!bb_got_signal)
+                bb_perror_msg("read from %s", _PATH_LOG);
+            break;
+        }
+
+        /* Drop trailing '\n' and NULs (typically there is one NUL) */
+        while (1) {
+            if (sz == 0)
+                goto read_again;
+            /* man 3 syslog says: "A trailing newline is added when needed".
+             * However, neither glibc nor uclibc do this:
+             * syslog(prio, "test")   sends "test\0" to /dev/log,
+             * syslog(prio, "test\n") sends "test\n\0".
+             * IOW: newline is passed verbatim!
+             * I take it to mean that it's syslogd's job
+             * to make those look identical in the log files. */
+            if (recvbuf[sz-1] != '\0' && recvbuf[sz-1] != '\n')
+                break;
+            sz--;
+        }
 #if ENABLE_FEATURE_SYSLOGD_DUP
-		if ((option_mask32 & OPT_dup) && (sz == last_sz))
-			if (memcmp(last_buf, recvbuf, sz) == 0)
-				continue;
-		last_sz = sz;
-#endif
-#if ENABLE_FEATURE_REMOTE_LOG
-		/* Stock syslogd sends it '\n'-terminated
-		 * over network, mimic that */
-		recvbuf[sz] = '\n';
-
-		/* We are not modifying log messages in any way before send */
-		/* Remote site cannot trust _us_ anyway and need to do validation again */
-		for (item = G.remoteHosts; item != NULL; item = item->link) {
-			remoteHost_t *rh = (remoteHost_t *)item->data;
-
-			if (rh->remoteFD == -1) {
-				rh->remoteFD = try_to_resolve_remote(rh);
-				if (rh->remoteFD == -1)
-					continue;
-			}
-
-			/* Send message to remote logger.
-			 * On some errors, close and set remoteFD to -1
-			 * so that DNS resolution is retried.
-			 */
-			if (sendto(rh->remoteFD, recvbuf, sz+1,
-					MSG_DONTWAIT | MSG_NOSIGNAL,
-					&(rh->remoteAddr->u.sa), rh->remoteAddr->len) == -1
-			) {
-				switch (errno) {
-				case ECONNRESET:
-				case ENOTCONN: /* paranoia */
-				case EPIPE:
-					close(rh->remoteFD);
-					rh->remoteFD = -1;
-					free(rh->remoteAddr);
-					rh->remoteAddr = NULL;
-				}
-			}
-		}
-#endif
-		if (!ENABLE_FEATURE_REMOTE_LOG || (option_mask32 & OPT_locallog)) {
-			recvbuf[sz] = '\0'; /* ensure it *is* NUL terminated */
-			split_escape_and_log(recvbuf, sz);
-		}
-	} /* while (!bb_got_signal) */
-
-	timestamp_and_log_internal("syslogd exiting");
-	remove_pidfile(CONFIG_PID_FILE_PATH "/syslogd.pid");
-	ipcsyslog_cleanup();
-	if (option_mask32 & OPT_kmsg)
-		kmsg_cleanup();
-	kill_myself_with_sig(bb_got_signal);
+        if ((option_mask32 & OPT_dup) && (sz == last_sz))
+            if (memcmp(last_buf, recvbuf, sz) == 0)
+                continue;
+        last_sz = sz;
+#endif
+
+        if (ENABLE_FEATURE_REMOTE_LOG || (option_mask32 & OPT_locallog)) {
+            recvbuf[sz] = '\0'; /* ensure it *is* NUL terminated */
+            split_escape_and_log(recvbuf, sz);
+        }
+    } /* while (!bb_got_signal) */
+
+    timestamp_and_log_internal("syslogd exiting");
+    remove_pidfile(CONFIG_PID_FILE_PATH "/syslogd.pid");
+    ipcsyslog_cleanup();
+    if (option_mask32 & OPT_kmsg)
+        kmsg_cleanup();
+    kill_myself_with_sig(bb_got_signal);
 #undef recvbuf
 }
 
 int syslogd_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int syslogd_main(int argc UNUSED_PARAM, char **argv)
 {
-	int opts;
-	char OPTION_DECL;
+    int opts;
+    char OPTION_DECL;
 #if ENABLE_FEATURE_REMOTE_LOG
 	llist_t *remoteAddrList = NULL;
 #endif
 
-	INIT_G();
+    INIT_G();
+/**********************************log filter*********************/
+    FILE *fp = fopen("/var/syslog.database","rb");
+    //* if (fp == NULL) { */ /* Removing this check, so that db gets always updated at init */
+        init_database();
+    /* } */
+    head_g = read_database();
+/*****************************************************************/
 
 	/* No non-option params */
 	opt_complementary = "=0";
